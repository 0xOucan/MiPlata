{
  "address": "0xccBba29463ceB532daE5e0b0ceA2e2FB480AbE76",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_aavePool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ethUsdPriceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_positionManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Compounded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdcAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wethAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "investmentId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum MiPlata.InvestmentType",
          "name": "investmentType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amplitude",
          "type": "uint256"
        }
      ],
      "name": "InvestmentMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "investmentId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Rebalanced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "investmentId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AMPLITUDE_CONSERVATIVE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AMPLITUDE_MODERATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AMPLITUDE_RISKY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMPOUND_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_INVESTMENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINIMUM_INVESTMENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REBALANCE_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VARIATION_HIGH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VARIATION_MEDIUM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aavePool",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accumulatedFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethUsdPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "investmentId",
          "type": "uint256"
        }
      ],
      "name": "getInvestmentValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalUsers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserInvestments",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "investmentId",
              "type": "uint256"
            },
            {
              "internalType": "enum MiPlata.InvestmentType",
              "name": "investmentType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "usdcDeposited",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "wethBorrowed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastAutoCompound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amplitude",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastEthPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct MiPlata.UserInvestment[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "enum MiPlata.InvestmentType",
          "name": "investmentType",
          "type": "uint8"
        }
      ],
      "name": "invest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "investments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "investmentId",
          "type": "uint256"
        },
        {
          "internalType": "enum MiPlata.InvestmentType",
          "name": "investmentType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "usdcDeposited",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wethBorrowed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastAutoCompound",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amplitude",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastEthPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastProcessedUserIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionManager",
      "outputs": [
        {
          "internalType": "contract INonfungiblePositionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "setFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapPool",
      "outputs": [
        {
          "internalType": "contract IUniswapV3Pool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouter",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInvestmentCounters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "investmentId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe041bd030ae8a6f4ca29e635aeadace0cf90a753c73f29f278f44515db051a29",
  "receipt": {
    "to": null,
    "from": "0x74C12FAC9af903EB09f1430B0720E7F5CA2A1B6D",
    "contractAddress": "0xccBba29463ceB532daE5e0b0ceA2e2FB480AbE76",
    "transactionIndex": 7,
    "gasUsed": "3488345",
    "logsBloom": "0x
    "blockHash": "0xcea6c4b05e97f76805ceb1caa0e489edb89c3e18fbc8299d182ad92e59f64849",
    "transactionHash": "0xe041bd030ae8a6f4ca29e635aeadace0cf90a753c73f29f278f44515db051a29",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 16861562,
        "transactionHash": "0xe041bd030ae8a6f4ca29e635aeadace0cf90a753c73f29f278f44515db051a29",
        "address": "0xccBba29463ceB532daE5e0b0ceA2e2FB480AbE76",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000074c12fac9af903eb09f1430b0720e7f5ca2a1b6d"
        ],
        "data": "0x",
        "logIndex": 21,
        "blockHash": "0xcea6c4b05e97f76805ceb1caa0e489edb89c3e18fbc8299d182ad92e59f64849"
      }
    ],
    "blockNumber": 16861562,
    "cumulativeGasUsed": "7116000",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x036CbD53842c5426634e7929541eC2318f3dCF7e",
    "0x4200000000000000000000000000000000000006",
    "0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4",
    "0xbE781D7Bdf469f3d94a62Cdcc407aCe106AEcA74",
    "0x4aDC67696bA383F43DD60A9e78F2C97Fbbfc7cb1",
    "0xB39b858e70d1df1d3ec8CEC542189c3b96F13E45",
    "0x27F971cb582BF9E50F397e4d29a5C7A34f11faA2",
    "0x7B3B786C36720F0d367F62dDb4e4B98e6f54DffD"
  ],
  "numDeployments": 1,
  "solcInputHash": "d83f835f65f2f7fafb0999304001fd70",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aavePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethUsdPriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_positionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Compounded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investmentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum MiPlata.InvestmentType\",\"name\":\"investmentType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amplitude\",\"type\":\"uint256\"}],\"name\":\"InvestmentMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investmentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Rebalanced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investmentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AMPLITUDE_CONSERVATIVE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AMPLITUDE_MODERATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AMPLITUDE_RISKY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_INVESTMENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_INVESTMENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REBALANCE_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VARIATION_HIGH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VARIATION_MEDIUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aavePool\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulatedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethUsdPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"investmentId\",\"type\":\"uint256\"}],\"name\":\"getInvestmentValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserInvestments\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"investmentId\",\"type\":\"uint256\"},{\"internalType\":\"enum MiPlata.InvestmentType\",\"name\":\"investmentType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"usdcDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wethBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAutoCompound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amplitude\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastEthPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct MiPlata.UserInvestment[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum MiPlata.InvestmentType\",\"name\":\"investmentType\",\"type\":\"uint8\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"investmentId\",\"type\":\"uint256\"},{\"internalType\":\"enum MiPlata.InvestmentType\",\"name\":\"investmentType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"usdcDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wethBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAutoCompound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amplitude\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastEthPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastProcessedUserIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionManager\",\"outputs\":[{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPool\",\"outputs\":[{\"internalType\":\"contract IUniswapV3Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInvestmentCounters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"investmentId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"Implementaci\\u00f3n de la funci\\u00f3n checkUpkeep de Chainlink Automation.\",\"returns\":{\"performData\":\"Datos para realizar el mantenimiento.\",\"upkeepNeeded\":\"Indica si se necesita realizar mantenimiento.\"}},\"emergencyWithdraw()\":{\"details\":\"Emergencia: permite al propietario retirar todos los fondos del contrato.\"},\"getInvestmentValue(uint256)\":{\"details\":\"Obtiene el valor total de una inversion en USDC.\",\"params\":{\"investmentId\":\"El ID de la inversion.\"},\"returns\":{\"_0\":\"El valor total de la inversion en USDC.\"}},\"getTotalUsers()\":{\"details\":\"Obtiene el total de inversiones realizadas.\",\"returns\":{\"_0\":\"El numero total de usuarios con inversiones.\"}},\"getUserInvestments(address)\":{\"details\":\"Obtiene todas las inversiones de un usuario.\",\"params\":{\"user\":\"La direccion del usuario.\"},\"returns\":{\"_0\":\"Un array de inversiones del usuario.\"}},\"invest(uint256,uint8)\":{\"details\":\"Permite a un usuario invertir USDC en la plataforma.\",\"params\":{\"amount\":\"La cantidad de USDC a invertir (6 decimales).\",\"investmentType\":\"El tipo de estrategia de inversion seleccionada.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pausa todas las operaciones del contrato.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"performUpkeep(bytes)\":{\"details\":\"Implementacion de la funcion performUpkeep de Chainlink Automation.\",\"params\":{\"performData\":\"Datos para realizar el mantenimiento.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setFeeCollector(address)\":{\"details\":\"Configura la direccion del colector de fees.\",\"params\":{\"_feeCollector\":\"La nueva direccion del colector de fees.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Reanuda todas las operaciones del contrato.\"},\"withdraw(uint256)\":{\"details\":\"Permite a un usuario retirar una inversion especifica.\",\"params\":{\"investmentId\":\"El ID de la inversion a retirar.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YourContract.sol\":\"MiPlata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aave/core-v3/contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n */\\ninterface IPool {\\n  /**\\n   * @dev Emitted on mintUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n   * @param amount The amount of supplied assets\\n   * @param referralCode The referral code used\\n   */\\n  event MintUnbacked(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on backUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param backer The address paying for the backing\\n   * @param amount The amount added as backing\\n   * @param fee The amount paid in fees\\n   */\\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\\n\\n  /**\\n   * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n   * @param amount The amount supplied\\n   * @param referralCode The referral code used\\n   */\\n  event Supply(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlying asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to The address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   */\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n   * @param referralCode The referral code used\\n   */\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n   */\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount,\\n    bool useATokens\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   */\\n  event SwapBorrowRateMode(\\n    address indexed reserve,\\n    address indexed user,\\n    DataTypes.InterestRateMode interestRateMode\\n  );\\n\\n  /**\\n   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param totalDebt The total isolation mode debt for the reserve\\n   */\\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\n\\n  /**\\n   * @dev Emitted when the user selects a certain asset category for eMode\\n   * @param user The address of the user\\n   * @param categoryId The category id\\n   */\\n  event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   */\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   */\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   */\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   */\\n  event FlashLoan(\\n    address indexed target,\\n    address initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 premium,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   */\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated.\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The next liquidity rate\\n   * @param stableBorrowRate The next stable borrow rate\\n   * @param variableBorrowRate The next variable borrow rate\\n   * @param liquidityIndex The next liquidity index\\n   * @param variableBorrowIndex The next variable borrow index\\n   */\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n   * @param reserve The address of the reserve\\n   * @param amountMinted The amount minted to the treasury\\n   */\\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n  /**\\n   * @notice Mints an `amount` of aTokens to the `onBehalfOf`\\n   * @param asset The address of the underlying asset to mint\\n   * @param amount The amount to mint\\n   * @param onBehalfOf The address that will receive the aTokens\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function mintUnbacked(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Back the current unbacked underlying with `amount` and pay `fee`.\\n   * @param asset The address of the underlying asset to back\\n   * @param amount The amount to back\\n   * @param fee The amount paid in fees\\n   * @return The backed amount\\n   */\\n  function backUnbacked(address asset, uint256 amount, uint256 fee) external returns (uint256);\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n  /**\\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   */\\n  function supplyWithPermit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external;\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   */\\n  function withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n  /**\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   */\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   */\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   * @return The final amount repaid\\n   */\\n  function repayWithPermit(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n   * equivalent debt tokens\\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n   * balance is not enough to cover the whole debt\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @return The final amount repaid\\n   */\\n  function repayWithATokens(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   */\\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\n\\n  /**\\n   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   */\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   */\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   */\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://docs.aave.com/developers/\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts of the assets being flash-borrowed\\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata interestRateModes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://docs.aave.com/developers/\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n   * @param asset The address of the asset being flash-borrowed\\n   * @param amount The amount of the asset being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function flashLoanSimple(\\n    address receiverAddress,\\n    address asset,\\n    uint256 amount,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   */\\n  function getUserAccountData(\\n    address user\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralBase,\\n      uint256 totalDebtBase,\\n      uint256 availableBorrowsBase,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  /**\\n   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n   * interest rate strategy\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n   */\\n  function initReserve(\\n    address asset,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Drop a reserve\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   */\\n  function dropReserve(address asset) external;\\n\\n  /**\\n   * @notice Updates the address of the interest rate strategy contract\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The address of the interest rate strategy contract\\n   */\\n  function setReserveInterestRateStrategyAddress(\\n    address asset,\\n    address rateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param configuration The new configuration bitmap\\n   */\\n  function setConfiguration(\\n    address asset,\\n    DataTypes.ReserveConfigurationMap calldata configuration\\n  ) external;\\n\\n  /**\\n   * @notice Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   */\\n  function getConfiguration(\\n    address asset\\n  ) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   */\\n  function getUserConfiguration(\\n    address user\\n  ) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the normalized variable debt per unit of asset\\n   * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\\n   * \\\"dynamic\\\" variable index based on time, current stored index and virtual rate at the current\\n   * moment (approx. a borrower would get if opening a position). This means that is always used in\\n   * combination with variable debt supply/balances.\\n   * If using this function externally, consider that is possible to have an increasing normalized\\n   * variable debt that is not equivalent to how the variable debt index would be updated in storage\\n   * (e.g. only updates with non-zero variable debt supply)\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   */\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  /**\\n   * @notice Validates and finalizes an aToken transfer\\n   * @dev Only callable by the overlying aToken of the `asset`\\n   * @param asset The address of the underlying asset of the aToken\\n   * @param from The user from which the aTokens are transferred\\n   * @param to The user receiving the aTokens\\n   * @param amount The amount being transferred/withdrawn\\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n   */\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromBefore,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  /**\\n   * @notice Returns the list of the underlying assets of all the initialized reserves\\n   * @dev It does not include dropped reserves\\n   * @return The addresses of the underlying assets of the initialized reserves\\n   */\\n  function getReservesList() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n   * @return The address of the reserve associated with id\\n   */\\n  function getReserveAddressById(uint16 id) external view returns (address);\\n\\n  /**\\n   * @notice Returns the PoolAddressesProvider connected to this contract\\n   * @return The address of the PoolAddressesProvider\\n   */\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Updates the protocol fee on the bridging\\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n   */\\n  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n  /**\\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n   * - A part is sent to aToken holders as extra, one time accumulated interest\\n   * - A part is collected by the protocol treasury\\n   * @dev The total premium is calculated on the total borrowed amount\\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n   */\\n  function updateFlashloanPremiums(\\n    uint128 flashLoanPremiumTotal,\\n    uint128 flashLoanPremiumToProtocol\\n  ) external;\\n\\n  /**\\n   * @notice Configures a new category for the eMode.\\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n   * The category 0 is reserved as it's the default for volatile assets\\n   * @param id The id of the category\\n   * @param config The configuration of the category\\n   */\\n  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\\n\\n  /**\\n   * @notice Returns the data of an eMode category\\n   * @param id The id of the category\\n   * @return The configuration data of the category\\n   */\\n  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\\n\\n  /**\\n   * @notice Allows a user to use the protocol in eMode\\n   * @param categoryId The id of the category\\n   */\\n  function setUserEMode(uint8 categoryId) external;\\n\\n  /**\\n   * @notice Returns the eMode the user is using\\n   * @param user The address of the user\\n   * @return The eMode id\\n   */\\n  function getUserEMode(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Resets the isolation mode total debt of the given asset to zero\\n   * @dev It requires the given asset has zero debt ceiling\\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n   */\\n  function resetIsolationModeTotalDebt(address asset) external;\\n\\n  /**\\n   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n   * @return The percentage of available liquidity to borrow, expressed in bps\\n   */\\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total fee on flash loans\\n   * @return The total fee on flashloans\\n   */\\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the part of the bridge fees sent to protocol\\n   * @return The bridge fee sent to the protocol treasury\\n   */\\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the part of the flashloan fees sent to protocol\\n   * @return The flashloan fee sent to the protocol treasury\\n   */\\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n   * @return The maximum number of reserves supported\\n   */\\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n  /**\\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n   * @param assets The list of reserves for which the minting needs to be executed\\n   */\\n  function mintToTreasury(address[] calldata assets) external;\\n\\n  /**\\n   * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n  function rescueTokens(address token, address to, uint256 amount) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @dev Deprecated: Use the `supply` function instead\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n}\\n\",\"keccak256\":\"0xbfd2077251c8dc766a56d45f4b03eb07f3441323e79c0f794efea3657a99747f\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n */\\ninterface IPoolAddressesProvider {\\n  /**\\n   * @dev Emitted when the market identifier is updated.\\n   * @param oldMarketId The old id of the market\\n   * @param newMarketId The new id of the market\\n   */\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n  /**\\n   * @dev Emitted when the pool is updated.\\n   * @param oldAddress The old address of the Pool\\n   * @param newAddress The new address of the Pool\\n   */\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool configurator is updated.\\n   * @param oldAddress The old address of the PoolConfigurator\\n   * @param newAddress The new address of the PoolConfigurator\\n   */\\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle is updated.\\n   * @param oldAddress The old address of the PriceOracle\\n   * @param newAddress The new address of the PriceOracle\\n   */\\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL manager is updated.\\n   * @param oldAddress The old address of the ACLManager\\n   * @param newAddress The new address of the ACLManager\\n   */\\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL admin is updated.\\n   * @param oldAddress The old address of the ACLAdmin\\n   * @param newAddress The new address of the ACLAdmin\\n   */\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle sentinel is updated.\\n   * @param oldAddress The old address of the PriceOracleSentinel\\n   * @param newAddress The new address of the PriceOracleSentinel\\n   */\\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool data provider is updated.\\n   * @param oldAddress The old address of the PoolDataProvider\\n   * @param newAddress The new address of the PoolDataProvider\\n   */\\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when a new proxy is created.\\n   * @param id The identifier of the proxy\\n   * @param proxyAddress The address of the created proxy contract\\n   * @param implementationAddress The address of the implementation contract\\n   */\\n  event ProxyCreated(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address indexed implementationAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when a new non-proxied contract address is registered.\\n   * @param id The identifier of the contract\\n   * @param oldAddress The address of the old contract\\n   * @param newAddress The address of the new contract\\n   */\\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\n   * @param id The identifier of the contract\\n   * @param proxyAddress The address of the proxy contract\\n   * @param oldImplementationAddress The address of the old implementation contract\\n   * @param newImplementationAddress The address of the new implementation contract\\n   */\\n  event AddressSetAsProxy(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address oldImplementationAddress,\\n    address indexed newImplementationAddress\\n  );\\n\\n  /**\\n   * @notice Returns the id of the Aave market to which this contract points to.\\n   * @return The market id\\n   */\\n  function getMarketId() external view returns (string memory);\\n\\n  /**\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n   * identify and validate multiple Aave markets.\\n   * @param newMarketId The market id\\n   */\\n  function setMarketId(string calldata newMarketId) external;\\n\\n  /**\\n   * @notice Returns an address by its identifier.\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\n   * @dev It returns ZERO if there is no registered address with the given id\\n   * @param id The id\\n   * @return The address of the registered for the specified id\\n   */\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  /**\\n   * @notice General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `newImplementationAddress`.\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n   * setter function, in order to avoid unexpected consequences\\n   * @param id The id\\n   * @param newImplementationAddress The address of the new implementation\\n   */\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\n\\n  /**\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  /**\\n   * @notice Returns the address of the Pool proxy.\\n   * @return The Pool proxy address\\n   */\\n  function getPool() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\n   * setting the new `pool` implementation when the function is called for the first time.\\n   * @param newPoolImpl The new Pool implementation\\n   */\\n  function setPoolImpl(address newPoolImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the PoolConfigurator proxy.\\n   * @return The PoolConfigurator proxy address\\n   */\\n  function getPoolConfigurator() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n   */\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle.\\n   * @return The address of the PriceOracle\\n   */\\n  function getPriceOracle() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle.\\n   * @param newPriceOracle The address of the new PriceOracle\\n   */\\n  function setPriceOracle(address newPriceOracle) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL manager.\\n   * @return The address of the ACLManager\\n   */\\n  function getACLManager() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL manager.\\n   * @param newAclManager The address of the new ACLManager\\n   */\\n  function setACLManager(address newAclManager) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL admin.\\n   * @return The address of the ACL admin\\n   */\\n  function getACLAdmin() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL admin.\\n   * @param newAclAdmin The address of the new ACL admin\\n   */\\n  function setACLAdmin(address newAclAdmin) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle sentinel.\\n   * @return The address of the PriceOracleSentinel\\n   */\\n  function getPriceOracleSentinel() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle sentinel.\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n   */\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n  /**\\n   * @notice Returns the address of the data provider.\\n   * @return The address of the DataProvider\\n   */\\n  function getPoolDataProvider() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the data provider.\\n   * @param newDataProvider The address of the new DataProvider\\n   */\\n  function setPoolDataProvider(address newDataProvider) external;\\n}\\n\",\"keccak256\":\"0x33d4308d9407b4ee2297fc4ba5acce1a96a6c658189e2778a4f6b90e032fb3b5\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    //timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    //aToken address\\n    address aTokenAddress;\\n    //stableDebtToken address\\n    address stableDebtTokenAddress;\\n    //variableDebtToken address\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the current treasury balance, scaled\\n    uint128 accruedToTreasury;\\n    //the outstanding unbacked aTokens minted through the bridging feature\\n    uint128 unbacked;\\n    //the outstanding debt borrowed against this asset in isolation mode\\n    uint128 isolationModeTotalDebt;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60: asset is paused\\n    //bit 61: borrowing in isolation mode is enabled\\n    //bit 62: siloed borrowing enabled\\n    //bit 63: flashloaning enabled\\n    //bit 64-79: reserve factor\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    //bit 152-167 liquidation protocol fee\\n    //bit 168-175 eMode category\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    //bit 252-255 unused\\n\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n    uint256 data;\\n  }\\n\\n  struct EModeCategory {\\n    // each eMode category has a custom ltv and liquidation threshold\\n    uint16 ltv;\\n    uint16 liquidationThreshold;\\n    uint16 liquidationBonus;\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n    address priceSource;\\n    string label;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n\\n  struct ReserveCache {\\n    uint256 currScaledVariableDebt;\\n    uint256 nextScaledVariableDebt;\\n    uint256 currPrincipalStableDebt;\\n    uint256 currAvgStableBorrowRate;\\n    uint256 currTotalStableDebt;\\n    uint256 nextAvgStableBorrowRate;\\n    uint256 nextTotalStableDebt;\\n    uint256 currLiquidityIndex;\\n    uint256 nextLiquidityIndex;\\n    uint256 currVariableBorrowIndex;\\n    uint256 nextVariableBorrowIndex;\\n    uint256 currLiquidityRate;\\n    uint256 currVariableBorrowRate;\\n    uint256 reserveFactor;\\n    ReserveConfigurationMap reserveConfiguration;\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    uint40 reserveLastUpdateTimestamp;\\n    uint40 stableDebtLastUpdateTimestamp;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    uint256 reservesCount;\\n    uint256 debtToCover;\\n    address collateralAsset;\\n    address debtAsset;\\n    address user;\\n    bool receiveAToken;\\n    address priceOracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    uint256 amount;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address user;\\n    address onBehalfOf;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint16 referralCode;\\n    bool releaseUnderlying;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    address onBehalfOf;\\n    bool useATokens;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    uint256 amount;\\n    address to;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ExecuteSetUserEModeParams {\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 categoryId;\\n  }\\n\\n  struct FinalizeTransferParams {\\n    address asset;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    uint256 balanceFromBefore;\\n    uint256 balanceToBefore;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 fromEModeCategory;\\n  }\\n\\n  struct FlashloanParams {\\n    address receiverAddress;\\n    address[] assets;\\n    uint256[] amounts;\\n    uint256[] interestRateModes;\\n    address onBehalfOf;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address addressesProvider;\\n    uint8 userEModeCategory;\\n    bool isAuthorizedFlashBorrower;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address receiverAddress;\\n    address asset;\\n    uint256 amount;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    uint256 amount;\\n    uint256 totalPremium;\\n    uint256 flashLoanPremiumToProtocol;\\n    address asset;\\n    address receiverAddress;\\n    uint16 referralCode;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    UserConfigurationMap userConfig;\\n    uint256 reservesCount;\\n    address user;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    ReserveCache reserveCache;\\n    UserConfigurationMap userConfig;\\n    address asset;\\n    address userAddress;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint256 maxStableLoanPercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n    bool isolationModeActive;\\n    address isolationModeCollateralAddress;\\n    uint256 isolationModeDebtCeiling;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 totalDebt;\\n    uint256 healthFactor;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    uint256 unbacked;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 totalStableDebt;\\n    uint256 totalVariableDebt;\\n    uint256 averageStableBorrowRate;\\n    uint256 reserveFactor;\\n    address reserve;\\n    address aToken;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address aTokenAddress;\\n    address stableDebtAddress;\\n    address variableDebtAddress;\\n    address interestRateStrategyAddress;\\n    uint16 reservesCount;\\n    uint16 maxNumberReserves;\\n  }\\n}\\n\",\"keccak256\":\"0x771cb99fd8519c974f7e12130387c4d9a997a6e8d0ac10e4303b842fe53efa88\",\"license\":\"BUSL-1.1\"},\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xf504b227c442cd4ed31b336b7bd15cfcb23220c84c26e750975c7e7d959125aa\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d6954a93ac198a2ffa384fa58ccf18e7e235263e051a394328002eff4e073de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = (~denominator + 1) & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd5064005a1ba8c3a46ec6e52e2fafb63cf5747e25d274ecad48e000215cc55c\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.20;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(uint24(MAX_TICK)), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0x2d1850026bee9b1eb6258fc7516a78379601a4f1ac6a0a6e4decd790aa934062\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\n/// @title ERC721 with permit\\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\\ninterface IERC721Permit is IERC721 {\\n    /// @notice The permit typehash used in the permit signature\\n    /// @return The typehash for the permit\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    /// @notice The domain separator used in the permit signature\\n    /// @return The domain seperator used in encoding of permit signature\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /// @notice Approve of a specific token ID for spending by spender via signature\\n    /// @param spender The account that is being approved\\n    /// @param tokenId The ID of the token that is being approved for spending\\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function permit(\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\\n\\nimport './IPoolInitializer.sol';\\nimport './IERC721Permit.sol';\\nimport './IPeripheryPayments.sol';\\nimport './IPeripheryImmutableState.sol';\\nimport '../libraries/PoolAddress.sol';\\n\\n/// @title Non-fungible token for positions\\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\\n/// and authorized.\\ninterface INonfungiblePositionManager is\\n    IPoolInitializer,\\n    IPeripheryPayments,\\n    IPeripheryImmutableState,\\n    IERC721Metadata,\\n    IERC721Enumerable,\\n    IERC721Permit\\n{\\n    /// @notice Emitted when liquidity is increased for a position NFT\\n    /// @dev Also emitted when a token is minted\\n    /// @param tokenId The ID of the token for which liquidity was increased\\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when liquidity is decreased for a position NFT\\n    /// @param tokenId The ID of the token for which liquidity was decreased\\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when tokens are collected for a position NFT\\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\\n    /// @param tokenId The ID of the token for which underlying tokens were collected\\n    /// @param recipient The address of the account that received the collected tokens\\n    /// @param amount0 The amount of token0 owed to the position that was collected\\n    /// @param amount1 The amount of token1 owed to the position that was collected\\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\\n\\n    /// @notice Returns the position information associated with a given token ID.\\n    /// @dev Throws if the token ID is not valid.\\n    /// @param tokenId The ID of the token that represents the position\\n    /// @return nonce The nonce for permits\\n    /// @return operator The address that is approved for spending\\n    /// @return token0 The address of the token0 for a specific pool\\n    /// @return token1 The address of the token1 for a specific pool\\n    /// @return fee The fee associated with the pool\\n    /// @return tickLower The lower end of the tick range for the position\\n    /// @return tickUpper The higher end of the tick range for the position\\n    /// @return liquidity The liquidity of the position\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Creates a new position wrapped in a NFT\\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\n    /// @return tokenId The ID of the token that represents the minted position\\n    /// @return liquidity The amount of liquidity for this position\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function mint(MintParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\n    /// amount0Desired The desired amount of token0 to be spent,\\n    /// amount1Desired The desired amount of token1 to be spent,\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return liquidity The new liquidity amount as a result of the increase\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n    /// recipient The account that should receive the tokens,\\n    /// amount0Max The maximum amount of token0 to collect,\\n    /// amount1Max The maximum amount of token1 to collect\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\n    /// must be collected first.\\n    /// @param tokenId The ID of the token that is being burned\\n    function burn(uint256 tokenId) external payable;\\n}\\n\",\"keccak256\":\"0x3357b065654abb7f4a9ebd184a260bc39efde2afa4e99dca2e72ffc28e9c2984\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\n/// @title Periphery Payments\\n/// @notice Functions to ease deposits and withdrawals of ETH\\ninterface IPeripheryPayments {\\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\\n    /// @param recipient The address receiving ETH\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\\n\\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\n    /// that use ether for the input amount\\n    function refundETH() external payable;\\n\\n    /// @notice Transfers the full amount of a token held by this contract to recipient\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\n    /// @param token The contract address of the token which will be transferred to `recipient`\\n    /// @param amountMinimum The minimum amount of token required for a transfer\\n    /// @param recipient The destination address of the token\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Creates and initializes V3 Pools\\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\\n/// require the pool to exist.\\ninterface IPoolInitializer {\\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\\n    /// @param token0 The contract address of token0 of the pool\\n    /// @param token1 The contract address of token1 of the pool\\n    /// @param fee The fee amount of the v3 pool for the specified token pair\\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\\n    function createAndInitializePoolIfNecessary(\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        uint160 sqrtPriceX96\\n    ) external payable returns (address pool);\\n}\\n\",\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint96.sol';\\n\\n/// @title Liquidity amount functions\\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\\nlibrary LiquidityAmounts {\\n    /// @notice Downcasts uint256 to uint128\\n    /// @param x The uint258 to be downcasted\\n    /// @return y The passed value, downcasted to uint128\\n    function toUint128(uint256 x) private pure returns (uint128 y) {\\n        require((y = uint128(x)) == x);\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount0 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount0(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount1 The amount1 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount1(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount of token0 being sent in\\n    /// @param amount1 The amount of token1 being sent in\\n    /// @return liquidity The maximum amount of liquidity received\\n    function getLiquidityForAmounts(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\\n\\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n        } else {\\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\\n        }\\n    }\\n\\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    function getAmount0ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            FullMath.mulDiv(\\n                uint256(liquidity) << FixedPoint96.RESOLUTION,\\n                sqrtRatioBX96 - sqrtRatioAX96,\\n                sqrtRatioBX96\\n            ) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount1 The amount of token1\\n    function getAmount1ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function getAmountsForLiquidity(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\\n        } else {\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf149581d28e1c81736dfe72be73ee1301d4945340cc6282fcdd63fe3c85abf24\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\nlibrary PoolAddress {\\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\\n\\n    /// @notice The identifying key of the pool\\n    struct PoolKey {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\n    /// @param tokenA The first token of a pool, unsorted\\n    /// @param tokenB The second token of a pool, unsorted\\n    /// @param fee The fee level of the pool\\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\\n    function getPoolKey(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) internal pure returns (PoolKey memory) {\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\\n    }\\n\\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\\n    /// @param factory The Uniswap V3 factory contract address\\n    /// @param key The PoolKey\\n    /// @return pool The contract address of the V3 pool\\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\\n        require(key.token0 < key.token1);\\n        pool = address(uint160(uint256(\\n    keccak256(\\n        abi.encodePacked(\\n            hex'ff',\\n            factory,\\n            keccak256(abi.encode(key.token0, key.token1, key.fee)),\\n            POOL_INIT_CODE_HASH\\n        )\\n    )\\n)));\\n    }\\n}\\n\",\"keccak256\":\"0x6e0491a691a2b237132ea24a4345ae88b34479ce0f3468a6f7e0a63c47883560\",\"license\":\"GPL-2.0-or-later\"},\"contracts/YourContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n// Importaciones de OpenZeppelin y otros contratos\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@aave/core-v3/contracts/interfaces/IPool.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\\\";\\n\\n// Importar las bibliotecas de Uniswap V3\\nimport \\\"@uniswap/v3-core/contracts/libraries/TickMath.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol\\\";\\n\\ncontract MiPlata is Ownable, ReentrancyGuard, AutomationCompatibleInterface, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    // Enumeracion para los tipos de inversion\\n    enum InvestmentType { Risky, Moderate, Conservative }\\n\\n    // Estructura para cada inversion de un usuario\\n    struct UserInvestment {\\n        uint256 investmentId;\\n        InvestmentType investmentType;\\n        uint256 usdcDeposited;\\n        uint256 wethBorrowed;\\n        uint256 lastAutoCompound;\\n        uint256 amplitude;\\n        uint256 tokenId; // ID del NFT de la posicion en Uniswap V3\\n        uint256 lastEthPrice; // Ultimo precio de ETH/USD registrado\\n        uint256 timestamp; // Marca de tiempo de la inversion\\n    }\\n\\n    // Variables de contratos externos\\n    IERC20 public usdc;\\n    IERC20 public weth;\\n    ISwapRouter public uniswapRouter;\\n    IPool public aavePool;\\n    AggregatorV3Interface public ethUsdPriceFeed;\\n    IUniswapV3Pool public uniswapPool;\\n    INonfungiblePositionManager public positionManager;\\n\\n    // Parametros de inversion\\n    uint256 public constant FEE_PERCENTAGE = 25; // 0.25% representado como 25/10000\\n    uint256 public constant MINIMUM_INVESTMENT = 5 * 1e6; // 5 USDC (6 decimales)\\n    uint256 public constant MAX_INVESTMENT = 100 * 1e6; // 100 USDC (6 decimales)\\n    uint256 public constant REBALANCE_THRESHOLD = 300; // 3% (representado como 300/10000)\\n    uint256 public constant VARIATION_HIGH = 750; // 7.5%\\n    uint256 public constant VARIATION_MEDIUM = 550; // 5.5%\\n    uint256 public constant COMPOUND_THRESHOLD = 100 * 1e6; // 100 USDC\\n\\n    // Amplitudes para Uniswap V3\\n    uint256 public constant AMPLITUDE_RISKY = 500; // Representa 5%\\n    uint256 public constant AMPLITUDE_MODERATE = 750; // 7.5%\\n    uint256 public constant AMPLITUDE_CONSERVATIVE = 1000; // 10%\\n\\n    // Direccion para colectar las comisiones\\n    address public feeCollector;\\n\\n    // Estructuras de datos para gestionar inversiones\\n    mapping(address => UserInvestment[]) public investments;\\n    mapping(address => uint256) public userInvestmentCounters;\\n    address[] public userAddresses;\\n    uint256 public lastProcessedUserIndex;\\n\\n    // Eventos\\n    event InvestmentMade(address indexed user, uint256 investmentId, uint256 amount, InvestmentType investmentType, uint256 amplitude);\\n    event Withdrawn(address indexed user, uint256 investmentId, uint256 amount);\\n    event Rebalanced(address indexed user, uint256 investmentId, uint256 timestamp);\\n    event Compounded(uint256 timestamp, uint256 amount);\\n    event EmergencyWithdrawal(address indexed owner, uint256 usdcAmount, uint256 wethAmount, uint256 timestamp);\\n\\n    // Agregar esta linea para declarar accumulatedFees\\n    uint256 public accumulatedFees;\\n\\n    constructor(\\n        address _usdc,\\n        address _weth,\\n        address _uniswapRouter,\\n        address _aavePool,\\n        address _ethUsdPriceFeed,\\n        address _uniswapPool,\\n        address _positionManager,\\n        address _feeCollector\\n    ) Ownable(msg.sender) {\\n        usdc = IERC20(_usdc);\\n        weth = IERC20(_weth);\\n        uniswapRouter = ISwapRouter(_uniswapRouter);\\n        aavePool = IPool(_aavePool);\\n        ethUsdPriceFeed = AggregatorV3Interface(_ethUsdPriceFeed);\\n        uniswapPool = IUniswapV3Pool(_uniswapPool);\\n        positionManager = INonfungiblePositionManager(_positionManager);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @dev Permite a un usuario invertir USDC en la plataforma.\\n     * @param amount La cantidad de USDC a invertir (6 decimales).\\n     * @param investmentType El tipo de estrategia de inversion seleccionada.\\n     */\\n    function invest(uint256 amount, InvestmentType investmentType)\\n        external\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        require(amount >= MINIMUM_INVESTMENT, \\\"Monto minimo no alcanzado\\\");\\n        require(amount <= MAX_INVESTMENT, \\\"Monto maximo excedido\\\");\\n\\n        usdc.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        // Calcular y transferir la comision\\n        uint256 fee = (amount * FEE_PERCENTAGE) / 10000; // 0.25%\\n        uint256 netAmount = amount - fee;\\n        usdc.safeTransfer(feeCollector, fee);\\n\\n        // Asignar fondos: 62.5% a Aave como colateral, 37.5% para prestamo y LP\\n        uint256 usdcCollateral = (netAmount * 6250) / 10000; // 62.5%\\n        uint256 borrowAmount = (netAmount * 3750) / 10000; // 37.5%\\n\\n        // Depositar USDC en Aave\\n        depositToAave(usdcCollateral);\\n\\n        // Pedir prestado WETH de Aave\\n        uint256 wethBorrowed = borrowFromAave(borrowAmount);\\n\\n        // Obtener la amplitud basada en la estrategia\\n        uint256 amplitude = getAmplitude(investmentType);\\n\\n        // Crear una posicion en Uniswap V3\\n        uint256 tokenId = createUniswapPosition(usdcCollateral, wethBorrowed, amplitude);\\n\\n        // Obtener el precio actual de ETH/USD\\n        uint256 currentEthPrice = getETHUSDPrice();\\n\\n        // Registrar la inversion del usuario\\n        uint256 investmentId = userInvestmentCounters[msg.sender]++;\\n        UserInvestment memory newInvestment = UserInvestment({\\n            investmentId: investmentId,\\n            investmentType: investmentType,\\n            usdcDeposited: usdcCollateral,\\n            wethBorrowed: wethBorrowed,\\n            lastAutoCompound: block.timestamp,\\n            amplitude: amplitude,\\n            tokenId: tokenId,\\n            lastEthPrice: currentEthPrice,\\n            timestamp: block.timestamp\\n        });\\n\\n        investments[msg.sender].push(newInvestment);\\n\\n        // Agregar al usuario a la lista si es la primera inversion\\n        if (investments[msg.sender].length == 1) {\\n            userAddresses.push(msg.sender);\\n        }\\n\\n        emit InvestmentMade(msg.sender, investmentId, netAmount, investmentType, amplitude);\\n    }\\n\\n    /**\\n     * @dev Permite a un usuario retirar una inversion especifica.\\n     * @param investmentId El ID de la inversion a retirar.\\n     */\\n    function withdraw(uint256 investmentId) external nonReentrant whenNotPaused {\\n        UserInvestment[] storage userInvestments = investments[msg.sender];\\n        uint256 index = getInvestmentIndex(msg.sender, investmentId);\\n        UserInvestment storage investment = userInvestments[index];\\n        require(investment.usdcDeposited > 0, \\\"No hay inversion activa\\\");\\n\\n        // Cerrar la posicion en Uniswap V3\\n        closeUniswapPosition(investment.tokenId);\\n\\n        // Repagar el prestamo en Aave\\n        repayAaveLoan(investment.wethBorrowed);\\n\\n        // Retirar el colateral de Aave\\n        withdrawFromAave(investment.usdcDeposited);\\n\\n        // Calcular el total a transferir al usuario\\n        uint256 wethBalance = weth.balanceOf(address(this));\\n        uint256 usdcFromWeth = swapWETHtoUSDC(wethBalance);\\n        uint256 totalAmount = investment.usdcDeposited + usdcFromWeth;\\n\\n        // Actualizar el total de inversiones\\n        // Nota: Esto puede necesitar ajustes dependiendo de la logica de contabilidad interna\\n        // Aqui asumimos que el totalInvestment se decrementa por el netAmount (sin comisiones)\\n        // Ajusta segun tu logica especifica\\n        // totalInvestment -= investment.usdcDeposited + wethFromBorrow;\\n\\n        // Eliminar la inversion del array\\n        userInvestments[index] = userInvestments[userInvestments.length - 1];\\n        userInvestments.pop();\\n\\n        // Eliminar al usuario de userAddresses si no tiene mas inversiones\\n        if (userInvestments.length == 0) {\\n            for (uint256 i = 0; i < userAddresses.length; i++) {\\n                if (userAddresses[i] == msg.sender) {\\n                    userAddresses[i] = userAddresses[userAddresses.length - 1];\\n                    userAddresses.pop();\\n                    break;\\n                }\\n            }\\n        }\\n\\n        // Transferir USDC al usuario\\n        usdc.safeTransfer(msg.sender, totalAmount);\\n\\n        emit Withdrawn(msg.sender, investmentId, totalAmount);\\n    }\\n\\n    /**\\n     * @dev Deposita USDC en Aave.\\n     * @param amount La cantidad de USDC a depositar.\\n     */\\n    function depositToAave(uint256 amount) internal {\\n        usdc.approve(address(aavePool), amount);\\n        aavePool.supply(address(usdc), amount, address(this), 0);\\n    }\\n\\n    /**\\n     * @dev Pide prestado WETH de Aave.\\n     * @param amount La cantidad de WETH a pedir prestado.\\n     * @return La cantidad de WETH pedida prestada.\\n     */\\n    function borrowFromAave(uint256 amount) internal returns (uint256) {\\n        aavePool.borrow(address(weth), amount, 2, 0, address(this));\\n        return amount;\\n    }\\n\\n    /**\\n     * @dev Repaga un prestamo de Aave.\\n     * @param amount La cantidad de WETH a repagar.\\n     */\\n    function repayAaveLoan(uint256 amount) internal {\\n        weth.approve(address(aavePool), amount);\\n        aavePool.repay(address(weth), amount, 2, address(this));\\n    }\\n\\n    /**\\n     * @dev Retira USDC de Aave.\\n     * @param amount La cantidad de USDC a retirar.\\n     */\\n    function withdrawFromAave(uint256 amount) internal {\\n        aavePool.withdraw(address(usdc), amount, address(this));\\n    }\\n\\n    /**\\n     * @dev Crea una posicion en Uniswap V3.\\n     * @param usdcAmount La cantidad de USDC para proporcionar liquidez.\\n     * @param wethAmount La cantidad de WETH para proporcionar liquidez.\\n     * @param amplitude La amplitud del rango de precios para la liquidez.\\n     * @return tokenId El ID del NFT de la posicion creada.\\n     */\\n    function createUniswapPosition(\\n        uint256 usdcAmount, \\n        uint256 wethAmount, \\n        uint256 amplitude\\n    ) internal returns (uint256 tokenId) {\\n        usdc.approve(address(positionManager), usdcAmount);\\n        weth.approve(address(positionManager), wethAmount);\\n\\n        (, int24 currentTick, , , , , ) = uniswapPool.slot0();\\n        int24 tickSpacing = uniswapPool.tickSpacing();\\n        \\n        // Convertir amplitude a int24 de forma segura\\n        require(amplitude <= uint256(int256(type(int24).max)), \\\"Amplitude too large\\\");\\n        int24 amplitudeInt24 = int24(int256(amplitude));\\n        \\n        int24 tickLower = currentTick - amplitudeInt24 * tickSpacing;\\n        int24 tickUpper = currentTick + amplitudeInt24 * tickSpacing;\\n\\n        INonfungiblePositionManager.MintParams memory params = INonfungiblePositionManager.MintParams({\\n            token0: address(usdc),\\n            token1: address(weth),\\n            fee: 3000, // 0.3%\\n            tickLower: tickLower,\\n            tickUpper: tickUpper,\\n            amount0Desired: usdcAmount,\\n            amount1Desired: wethAmount,\\n            amount0Min: (usdcAmount * 99) / 100, // 1% slippage tolerance\\n            amount1Min: (wethAmount * 99) / 100, // 1% slippage tolerance\\n            recipient: address(this),\\n            deadline: block.timestamp + 15 minutes\\n        });\\n\\n        (tokenId, , , ) = positionManager.mint(params);\\n        require(tokenId != 0, \\\"Error al crear posicion en Uniswap\\\");\\n    }\\n\\n    /**\\n     * @dev Cierra una posicion en Uniswap V3.\\n     * @param tokenId El ID del NFT de la posicion a cerrar.\\n     */\\n    function closeUniswapPosition(uint256 tokenId) internal {\\n        // Verificar que el tokenId pertenece al contrato\\n        (, , address tokenOwner, , , , , , , , , ) = positionManager.positions(tokenId);\\n        require(tokenOwner == address(this), \\\"Token ID no pertenece al contrato\\\");\\n\\n        // Obtener la liquidez actual\\n        (, , , , , , , uint128 liquidity, , , , ) = positionManager.positions(tokenId);\\n        require(liquidity > 0, \\\"No hay liquidez en la posicion\\\");\\n\\n        // Decrease Liquidity\\n        INonfungiblePositionManager.DecreaseLiquidityParams memory decreaseParams = INonfungiblePositionManager.DecreaseLiquidityParams({\\n            tokenId: tokenId,\\n            liquidity: liquidity,\\n            amount0Min: 0,\\n            amount1Min: 0,\\n            deadline: block.timestamp + 15 minutes\\n        });\\n        positionManager.decreaseLiquidity(decreaseParams);\\n\\n        // Collect tokens\\n        INonfungiblePositionManager.CollectParams memory collectParams = INonfungiblePositionManager.CollectParams({\\n            tokenId: tokenId,\\n            recipient: address(this),\\n            amount0Max: type(uint128).max,\\n            amount1Max: type(uint128).max\\n        });\\n        positionManager.collect(collectParams);\\n\\n        // Burn the NFT\\n        positionManager.burn(tokenId);\\n    }\\n\\n    /**\\n     * @dev Cambia WETH a USDC usando Uniswap V3.\\n     * @param wethAmount La cantidad de WETH a cambiar.\\n     * @return La cantidad de USDC recibida.\\n     */\\n    function swapWETHtoUSDC(uint256 wethAmount) internal returns (uint256) {\\n        weth.approve(address(uniswapRouter), wethAmount);\\n\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\n            tokenIn: address(weth),\\n            tokenOut: address(usdc),\\n            fee: 3000,\\n            recipient: address(this),\\n            deadline: block.timestamp + 15 minutes,\\n            amountIn: wethAmount,\\n            amountOutMinimum: 0, // Puedes ajustar esto segun tu tolerancia al deslizamiento\\n            sqrtPriceLimitX96: 0\\n        });\\n\\n        return uniswapRouter.exactInputSingle(params);\\n    }\\n\\n    /**\\n     * @dev Cambia USDC a WETH usando Uniswap V3.\\n     * @param usdcAmount La cantidad de USDC a cambiar.\\n     * @return La cantidad de WETH recibida.\\n     */\\n    function swapUSDCtoWETH(uint256 usdcAmount) internal returns (uint256) {\\n        usdc.approve(address(uniswapRouter), usdcAmount);\\n\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\n            tokenIn: address(usdc),\\n            tokenOut: address(weth),\\n            fee: 3000,\\n            recipient: address(this),\\n            deadline: block.timestamp + 15 minutes,\\n            amountIn: usdcAmount,\\n            amountOutMinimum: 0, // Puedes ajustar esto segun tu tolerancia al deslizamiento\\n            sqrtPriceLimitX96: 0\\n        });\\n\\n        return uniswapRouter.exactInputSingle(params);\\n    }\\n\\n    /**\\n     * @dev Obtiene la amplitud basada en el tipo de inversion.\\n     * @param investmentType El tipo de inversion.\\n     * @return La amplitud correspondiente.\\n     */\\n    function getAmplitude(InvestmentType investmentType) internal pure returns (uint256) {\\n        if (investmentType == InvestmentType.Risky) return AMPLITUDE_RISKY;\\n        if (investmentType == InvestmentType.Moderate) return AMPLITUDE_MODERATE;\\n        return AMPLITUDE_CONSERVATIVE;\\n    }\\n\\n    /**\\n     * @dev Obtiene el indice de una inversion especifica del usuario.\\n     * @param user El usuario.\\n     * @param investmentId El ID de la inversion.\\n     * @return El indice de la inversion en el array del usuario.\\n     */\\n    function getInvestmentIndex(address user, uint256 investmentId) internal view returns (uint256) {\\n        UserInvestment[] storage userInvestments = investments[user];\\n        for (uint256 i = 0; i < userInvestments.length; i++) {\\n            if (userInvestments[i].investmentId == investmentId) {\\n                return i;\\n            }\\n        }\\n        revert(\\\"Inversion no encontrada\\\");\\n    }\\n\\n    /**\\n     * @dev Obtiene el precio actual de ETH en USD desde Chainlink.\\n     * @return El precio de ETH/USD con 8 decimales.\\n     */\\n    function getETHUSDPrice() internal view returns (uint256) {\\n        (, int256 price, , uint256 updatedAt, ) = ethUsdPriceFeed.latestRoundData();\\n        require(price > 0, \\\"Precio ETH/USD invalido\\\");\\n        require(block.timestamp - updatedAt < 1 hours, \\\"Precio ETH/USD desactualizado\\\");\\n        return uint256(price); // 8 decimales\\n    }\\n\\n    /**\\n     * @dev Implementaci\\u00f3n de la funci\\u00f3n checkUpkeep de Chainlink Automation.\\n     * @return upkeepNeeded Indica si se necesita realizar mantenimiento.\\n     * @return performData Datos para realizar el mantenimiento.\\n     */\\n    function checkUpkeep(bytes calldata /* checkData */) external view override returns (bool upkeepNeeded, bytes memory performData) {\\n        bool needsRebalance = false;\\n        bool needsCompound = false;\\n\\n        // Verificar si hay suficientes comisiones acumuladas para componer\\n        if (getAccumulatedFees() >= COMPOUND_THRESHOLD) {\\n            needsCompound = true;\\n        }\\n\\n        // Verificar si alguna inversi\\u00f3n necesita reequilibrio\\n        for (uint256 i = 0; i < userAddresses.length; i++) {\\n            address user = userAddresses[i];\\n            UserInvestment[] storage userInvestments = investments[user];\\n            for (uint256 j = 0; j < userInvestments.length; j++) {\\n                UserInvestment storage investment = userInvestments[j];\\n                uint256 currentPrice = getETHUSDPrice();\\n                uint256 priceChange = calculatePriceVariation(investment.lastEthPrice, currentPrice);\\n                if (priceChange >= REBALANCE_THRESHOLD) {\\n                    needsRebalance = true;\\n                    break;\\n                }\\n            }\\n            if (needsRebalance) break;\\n        }\\n\\n        upkeepNeeded = needsRebalance || needsCompound;\\n\\n        if (upkeepNeeded) {\\n            performData = abi.encode(needsRebalance, needsCompound);\\n        }\\n\\n        return (upkeepNeeded, performData);\\n    }\\n\\n    /**\\n     * @dev Implementacion de la funcion performUpkeep de Chainlink Automation.\\n     * @param performData Datos para realizar el mantenimiento.\\n     */\\n    function performUpkeep(bytes calldata performData) external override {\\n        (bool needsRebalance, bool needsCompound) = abi.decode(performData, (bool, bool));\\n\\n        if (needsRebalance) {\\n            rebalanceAll();\\n        }\\n\\n        if (needsCompound) {\\n            compoundAll();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reequilibra todas las inversiones que lo requieran.\\n     */\\n    function rebalanceAll() internal {\\n        for (uint256 i = 0; i < userAddresses.length; i++) {\\n            address user = userAddresses[i];\\n            UserInvestment[] storage userInvestments = investments[user];\\n            for (uint256 j = 0; j < userInvestments.length; j++) {\\n                UserInvestment storage investment = userInvestments[j];\\n                uint256 currentPrice = getETHUSDPrice();\\n                uint256 priceChange = calculatePriceVariation(investment.lastEthPrice, currentPrice);\\n                if (priceChange >= REBALANCE_THRESHOLD) {\\n                    // Cerrar la posicion existente\\n                    closeUniswapPosition(investment.tokenId);\\n\\n                    // Repagar el prestamo en Aave\\n                    repayAaveLoan(investment.wethBorrowed);\\n\\n                    // Retirar el colateral de Aave\\n                    withdrawFromAave(investment.usdcDeposited);\\n\\n                    // Reasignar fondos\\n                    uint256 totalAmount = investment.usdcDeposited + swapWETHtoUSDC(weth.balanceOf(address(this)));\\n\\n                    // Calcular y transferir la comision\\n                    uint256 fee = (totalAmount * FEE_PERCENTAGE) / 10000;\\n                    uint256 netAmount = totalAmount - fee;\\n                    usdc.safeTransfer(feeCollector, fee);\\n\\n                    // Asignar nuevamente 62.5% a Aave y 37.5% para prestamo y LP\\n                    uint256 usdcCollateral = (netAmount * 6250) / 10000;\\n                    uint256 borrowAmount = (netAmount * 3750) / 10000;\\n\\n                    // Depositar nuevamente en Aave\\n                    depositToAave(usdcCollateral);\\n\\n                    // Pedir prestado WETH de Aave\\n                    uint256 wethBorrowed = borrowFromAave(borrowAmount);\\n\\n                    // Crear una nueva posicion en Uniswap V3\\n                    uint256 newTokenId = createUniswapPosition(usdcCollateral, wethBorrowed, investment.amplitude);\\n\\n                    // Actualizar la inversion\\n                    investment.usdcDeposited = usdcCollateral;\\n                    investment.wethBorrowed = wethBorrowed;\\n                    investment.tokenId = newTokenId;\\n                    investment.lastEthPrice = currentPrice;\\n                    investment.lastAutoCompound = block.timestamp;\\n\\n                    emit Rebalanced(user, investment.investmentId, block.timestamp);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Realiza la autocomposicion de las fees acumuladas.\\n     */\\n    function compoundAll() internal {\\n        uint256 fees = getAccumulatedFees();\\n        require(fees >= COMPOUND_THRESHOLD, \\\"No hay suficientes fees para componer\\\");\\n\\n        // Resetear las fees acumuladas\\n        accumulatedFees = 0;\\n\\n        // Cambiar parte de las fees a WETH y proporcionar liquidez nuevamente\\n        uint256 halfFees = fees / 2;\\n        uint256 wethAmount = swapUSDCtoWETH(halfFees);\\n        uint256 usdcAmount = halfFees;\\n\\n        // Crear una nueva posicion en Uniswap V3 con las fees\\n        createUniswapPosition(usdcAmount, wethAmount, AMPLITUDE_CONSERVATIVE);\\n\\n        emit Compounded(block.timestamp, fees);\\n    }\\n\\n    /**\\n     * @dev Calcula la variacion porcentual del precio de ETH.\\n     * @param lastPrice El ultimo precio registrado de ETH.\\n     * @param currentPrice El precio actual de ETH.\\n     * @return La variacion porcentual representada como un entero (ej. 750 para 7.5%).\\n     */\\n    function calculatePriceVariation(uint256 lastPrice, uint256 currentPrice) internal pure returns (uint256) {\\n        if (currentPrice >= lastPrice) {\\n            return ((currentPrice - lastPrice) * 10000) / lastPrice;\\n        } else {\\n            return ((lastPrice - currentPrice) * 10000) / lastPrice;\\n        }\\n    }\\n\\n    /**\\n     * @dev Obtiene las fees acumuladas para la autocomposicion.\\n     * @return Las fees acumuladas en USDC.\\n     */\\n    function getAccumulatedFees() internal view returns (uint256) {\\n        return accumulatedFees;\\n    }\\n\\n    /**\\n     * @dev Emergencia: permite al propietario retirar todos los fondos del contrato.\\n     */\\n    function emergencyWithdraw() external onlyOwner {\\n        uint256 usdcBalance = usdc.balanceOf(address(this));\\n        uint256 wethBalance = weth.balanceOf(address(this));\\n\\n        if (usdcBalance > 0) {\\n            usdc.safeTransfer(owner(), usdcBalance);\\n        }\\n\\n        if (wethBalance > 0) {\\n            weth.safeTransfer(owner(), wethBalance);\\n        }\\n\\n        emit EmergencyWithdrawal(owner(), usdcBalance, wethBalance, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Pausa todas las operaciones del contrato.\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Reanuda todas las operaciones del contrato.\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Asegura que el contrato tenga la aprobacion necesaria para gastar tokens.\\n     * @param token El token a aprobar.\\n     * @param spender La direccion que recibira la aprobacion.\\n     * @param amount La cantidad a aprobar.\\n     */\\n    function ensureApproval(IERC20 token, address spender, uint256 amount) internal {\\n        uint256 currentAllowance = token.allowance(address(this), spender);\\n        if (currentAllowance < amount) {\\n            token.safeIncreaseAllowance(spender, type(uint256).max - currentAllowance);\\n        }\\n    }\\n\\n    /**\\n     * @dev Configura la direccion del colector de fees.\\n     * @param _feeCollector La nueva direccion del colector de fees.\\n     */\\n    function setFeeCollector(address _feeCollector) external onlyOwner {\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @dev Obtiene el valor total de una inversion en USDC.\\n     * @param investmentId El ID de la inversion.\\n     * @return El valor total de la inversion en USDC.\\n     */\\n    function getInvestmentValue(uint256 investmentId) external view returns (uint256) {\\n        UserInvestment storage investment = investments[msg.sender][getInvestmentIndex(msg.sender, investmentId)];\\n\\n        // Calcular el valor de la posicion LP\\n        uint256 lpValue = getCurrentLpValue(investment.tokenId);\\n\\n        // Obtener el valor del colateral y el valor del prestamo\\n        uint256 collateralValue = investment.usdcDeposited;\\n        uint256 loanValue = investment.wethBorrowed * getETHUSDPrice() / 1e8; // Convertir WETH a USDC\\n\\n        // Valor total de la inversion\\n        uint256 totalValue = lpValue + collateralValue - loanValue;\\n\\n        return totalValue;\\n    }\\n\\n    /**\\n     * @dev Calcula el valor actual de una posicion LP en USDC.\\n     * @param tokenId El ID del NFT de la posicion en Uniswap V3.\\n     * @return El valor total de la posicion LP en USDC.\\n     */\\n    function getCurrentLpValue(uint256 tokenId) internal view returns (uint256) {\\n        (uint256 amountUSDC, uint256 amountWETH) = getAmountsFromPosition(tokenId);\\n        uint256 ethPrice = getETHUSDPrice(); // 8 decimales\\n        uint256 wethValueInUSDC = (amountWETH * ethPrice) / 1e8;\\n        uint256 totalLpValue = amountUSDC + wethValueInUSDC;\\n        return totalLpValue;\\n    }\\n\\n    /**\\n     * @dev Obtiene las cantidades de USDC y WETH de una posicion en Uniswap V3.\\n     * @param tokenId El ID del NFT de la posicion.\\n     * @return amountUSDC La cantidad de USDC en la posicion.\\n     * @return amountWETH La cantidad de WETH en la posicion.\\n     */\\n    function getAmountsFromPosition(uint256 tokenId) internal view returns (uint256 amountUSDC, uint256 amountWETH) {\\n        (, , , , , , , uint128 liquidity, , , , ) = positionManager.positions(tokenId);\\n        if (liquidity == 0) {\\n            return (0, 0);\\n        }\\n\\n        (uint160 sqrtPriceX96, , , , , , ) = uniswapPool.slot0();\\n        (uint160 sqrtRatioAX96, ) = getSqrtRatios(tokenId);\\n\\n        amountUSDC = LiquidityAmounts.getAmount0ForLiquidity(\\n            sqrtPriceX96,\\n            sqrtRatioAX96,\\n            liquidity\\n        );\\n\\n        amountWETH = LiquidityAmounts.getAmount1ForLiquidity(\\n            sqrtPriceX96,\\n            sqrtRatioAX96,\\n            liquidity\\n        );\\n    }\\n\\n    /**\\n     * @dev Obtiene los valores de sqrtRatioAX96 y sqrtRatioBX96 para una posicion.\\n     * @param tokenId El ID del NFT de la posicion.\\n     * @return sqrtRatioAX96 El valor de sqrtRatioAX96.\\n     * @return sqrtRatioBX96 El valor de sqrtRatioBX96.\\n     */\\n    function getSqrtRatios(uint256 tokenId) internal view returns (uint160 sqrtRatioAX96, uint160 sqrtRatioBX96) {\\n        (, , , , , int24 tickLower, int24 tickUpper, , , , , ) = positionManager.positions(tokenId);\\n        sqrtRatioAX96 = TickMath.getSqrtRatioAtTick(tickLower);\\n        sqrtRatioBX96 = TickMath.getSqrtRatioAtTick(tickUpper);\\n    }\\n\\n    /**\\n     * @dev Obtiene el total de inversiones realizadas.\\n     * @return El numero total de usuarios con inversiones.\\n     */\\n    function getTotalUsers() external view returns (uint256) {\\n        return userAddresses.length;\\n    }\\n\\n    /**\\n     * @dev Obtiene todas las inversiones de un usuario.\\n     * @param user La direccion del usuario.\\n     * @return Un array de inversiones del usuario.\\n     */\\n    function getUserInvestments(address user) external view returns (UserInvestment[] memory) {\\n        return investments[user];\\n    }\\n}\\n\",\"keccak256\":\"0x9280401baf33db86c22d4ca1b86ce3a05bc50fc5e2cee63243cef5164abd065b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003c1038038062003c10833981016040819052620000349162000174565b33806200005b57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b620000668162000107565b5060018055600280546001600160a81b0319166101006001600160a01b039a8b1602179055600380546001600160a01b0319908116988a169890981790556004805488169689169690961790955560058054871694881694909417909355600680548616928716929092179091556007805485169186169190911790556008805484169185169190911790556009805490921692169190911790556200021c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200016f57600080fd5b919050565b600080600080600080600080610100898b0312156200019257600080fd5b6200019d8962000157565b9750620001ad60208a0162000157565b9650620001bd60408a0162000157565b9550620001cd60608a0162000157565b9450620001dd60808a0162000157565b9350620001ed60a08a0162000157565b9250620001fd60c08a0162000157565b91506200020d60e08a0162000157565b90509295985092959890939650565b6139e4806200022c6000396000f3fe608060405234801561001057600080fd5b50600436106102315760003560e01c80636e04ff0d11610130578063a03e4bc3116100b8578063c85b967d1161007c578063c85b967d14610462578063c885c43b1461046b578063db2e21bc1461048b578063ecf6204d14610493578063f2fde38b146104a657600080fd5b8063a03e4bc3146103f6578063a42dce8014610409578063bdd3d8251461041c578063c415b95c1461042f578063c52c5c881461044257600080fd5b80638456cb59116100ff5780638456cb59146103cb5780638a4660fe146103d35780638be679ce1461025a5780638da5cb5b146103dd5780639be572f6146103ee57600080fd5b80636e04ff0d1461037c578063715018a61461039d578063735de9f7146103a5578063791b98bc146103b857600080fd5b80633fc8cef3116101be578063517454f111610182578063517454f114610338578063587f5ed7146103415780635c190bfc1461034a5780635c975abb146103535780635e03b67a1461036957600080fd5b80633fc8cef3146102ec57806342f6fb29146102ff5780634585e33b146103125780634c76361e14610281578063502c9bd51461032557600080fd5b80632e1a7d4d116102055780632e1a7d4d1461026c57806335a4bece146102815780633e413bee1461028c5780633e6d9770146102bc5780633f4ba83a146102e457600080fd5b80620b46f8146102365780630ad8f69d146102515780631ed406c01461025a5780632b34aaae14610263575b600080fd5b61023e601981565b6040519081526020015b60405180910390f35b61023e6101f481565b61023e6102ee81565b61023e6103e881565b61027f61027a366004613132565b6104b9565b005b61023e6305f5e10081565b6002546102a49061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610248565b6102cf6102ca366004613160565b6108c8565b604051610248999897969594939291906131c4565b61027f610934565b6003546102a4906001600160a01b031681565b6006546102a4906001600160a01b031681565b61027f610320366004613210565b610946565b6102a4610333366004613132565b61097b565b61023e600d5481565b61023e600e5481565b61023e61022681565b60025460ff166040519015158152602001610248565b61027f610377366004613282565b6109a5565b61038f61038a366004613210565b610d0e565b6040516102489291906132da565b61027f610e51565b6004546102a4906001600160a01b031681565b6008546102a4906001600160a01b031681565b61027f610e63565b61023e624c4b4081565b6000546001600160a01b03166102a4565b600c5461023e565b6005546102a4906001600160a01b031681565b61027f610417366004613316565b610e73565b6007546102a4906001600160a01b031681565b6009546102a4906001600160a01b031681565b610455610450366004613316565b610e9d565b6040516102489190613333565b61023e61012c81565b61023e610479366004613316565b600b6020526000908152604090205481565b61027f610f9c565b61023e6104a1366004613132565b61113d565b61027f6104b4366004613316565b6111de565b6104c1611219565b6104c9611243565b336000818152600a60205260408120916104e39084611267565b905060008282815481106104f9576104f96133d4565b9060005260206000209060090201905060008160020154116105625760405162461bcd60e51b815260206004820152601760248201527f4e6f2068617920696e76657273696f6e2061637469766100000000000000000060448201526064015b60405180910390fd5b61056f816006015461131e565b61057c81600301546116d9565b61058981600201546117da565b6003546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156105d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f691906133ea565b9050600061060382611820565b905060008184600201546106179190613419565b8654909150869061062a9060019061342c565b8154811061063a5761063a6133d4565b906000526020600020906009020186868154811061065a5761065a6133d4565b600091825260209091208254600990920201908155600180830154818301805460ff90921692909160ff1916908360028111156106995761069961318c565b021790555060028201548160020155600382015481600301556004820154816004015560058201548160050155600682015481600601556007820154816007015560088201548160080155905050858054806106f7576106f761343f565b60008281526020812060096000199093019283020181815560018101805460ff1916905560028101829055600381018290556004810182905560058101829055600681018290556007810182905560080181905591558654900361085f5760005b600c5481101561085d57336001600160a01b0316600c828154811061077f5761077f6133d4565b6000918252602090912001546001600160a01b03160361084b57600c80546107a99060019061342c565b815481106107b9576107b96133d4565b600091825260209091200154600c80546001600160a01b0390921691839081106107e5576107e56133d4565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600c8054806108245761082461343f565b600082815260209020810160001990810180546001600160a01b031916905501905561085d565b8061085581613455565b915050610758565b505b60025461087b9061010090046001600160a01b031633836119d4565b604080518881526020810183905233917f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc6910160405180910390a25050505050506108c560018055565b50565b600a60205281600052604060002081815481106108e457600080fd5b600091825260209091206009909102018054600182015460028301546003840154600485015460058601546006870154600788015460089098015496995060ff9095169750929591949093919089565b61093c611a38565b610944611a65565b565b6000806109558385018561347c565b91509150811561096757610967611ab7565b801561097557610975611d55565b50505050565b600c818154811061098b57600080fd5b6000918252602090912001546001600160a01b0316905081565b6109ad611219565b6109b5611243565b624c4b40821015610a085760405162461bcd60e51b815260206004820152601960248201527f4d6f6e746f206d696e696d6f206e6f20616c63616e7a61646f000000000000006044820152606401610559565b6305f5e100821115610a545760405162461bcd60e51b81526020600482015260156024820152744d6f6e746f206d6178696d6f20657863656469646f60581b6044820152606401610559565b600254610a719061010090046001600160a01b0316333085611e33565b6000612710610a816019856134aa565b610a8b91906134d7565b90506000610a99828561342c565b600954600254919250610abe9161010090046001600160a01b039081169116846119d4565b6000612710610acf8361186a6134aa565b610ad991906134d7565b90506000612710610aec84610ea66134aa565b610af691906134d7565b9050610b0182611e6c565b6000610b0c82611f68565b90506000610b1987611fef565b90506000610b2885848461203d565b90506000610b3461242f565b336000908152600b60205260408120805492935090919082610b5583613455565b91905055905060006040518061012001604052808381526020018c6002811115610b8157610b8161318c565b815260208082018b905260408083018a90524260608401819052608084018a905260a0840189905260c0840188905260e090930192909252336000908152600a825291822080546001818101835591845292829020845160099094020192835590830151828201805494955085949192909160ff191690836002811115610c0a57610c0a61318c565b02179055506040828101516002830155606083015160038301556080830151600483015560a0830151600583015560c0830151600683015560e0830151600783015561010090920151600890910155336000908152600a6020522054600103610cb057600c80546001810182556000919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180546001600160a01b031916331790555b336001600160a01b03167f66fff6b0bd3e1f85abff4e26682c05a8d2a6b4db8812b651d56694750ed8f99c838b8e89604051610cef94939291906134eb565b60405180910390a250505050505050505050610d0a60018055565b5050565b600060606000806305f5e100610d23600e5490565b10610d2c575060015b60005b600c54811015610e0f576000600c8281548110610d4e57610d4e6133d4565b60009182526020808320909101546001600160a01b0316808352600a90915260408220909250905b8154811015610dec576000828281548110610d9357610d936133d4565b906000526020600020906009020190506000610dad61242f565b90506000610dbf836007015483612562565b905061012c8110610dd65760019850505050610dec565b5050508080610de490613455565b915050610d76565b508415610dfa575050610e0f565b50508080610e0790613455565b915050610d2f565b508180610e195750805b93508315610e485760408051831515602082015282151581830152815180820383018152606090910190915292505b50509250929050565b610e59611a38565b610944600061259e565b610e6b611a38565b6109446125ee565b610e7b611a38565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600a60209081526040808320805482518185028101850190935280835260609492939192909184015b82821015610f91578382906000526020600020906009020160405180610120016040529081600082015481526020016001820160009054906101000a900460ff166002811115610f2757610f2761318c565b6002811115610f3857610f3861318c565b815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815260200160088201548152505081526020019060010190610ed5565b505050509050919050565b610fa4611a38565b6002546040516370a0823160e01b815230600482015260009161010090046001600160a01b0316906370a0823190602401602060405180830381865afa158015610ff2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101691906133ea565b6003546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611064573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108891906133ea565b905081156110bd576110bd6110a56000546001600160a01b031690565b60025461010090046001600160a01b031690846119d4565b80156110eb576110eb6110d86000546001600160a01b031690565b6003546001600160a01b031690836119d4565b6000546040805184815260208101849052428183015290516001600160a01b03909216917f5e51ee1d526b1e287667d5b5aa0f1595afa8e91197fb257f8351274f8fca50be9181900360600190a25050565b336000818152600a60205260408120909182919061115b9085611267565b8154811061116b5761116b6133d4565b90600052602060002090600902019050600061118a826006015461262b565b600283015490915060006305f5e1006111a161242f565b85600301546111b091906134aa565b6111ba91906134d7565b90506000816111c98486613419565b6111d3919061342c565b979650505050505050565b6111e6611a38565b6001600160a01b03811661121057604051631e4fbdf760e01b815260006004820152602401610559565b6108c58161259e565b60026001540361123c57604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b60025460ff16156109445760405163d93c066560e01b815260040160405180910390fd5b6001600160a01b0382166000908152600a60205260408120815b81548110156112cf578382828154811061129d5761129d6133d4565b906000526020600020906009020160000154036112bd5791506113189050565b806112c781613455565b915050611281565b5060405162461bcd60e51b815260206004820152601760248201527f496e76657273696f6e206e6f20656e636f6e74726164610000000000000000006044820152606401610559565b92915050565b60085460405163133f757160e31b8152600481018390526000916001600160a01b0316906399fbab889060240161018060405180830381865afa158015611369573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138d9190613561565b50505050505050505092505050306001600160a01b0316816001600160a01b0316146114055760405162461bcd60e51b815260206004820152602160248201527f546f6b656e204944206e6f2070657274656e65636520616c20636f6e747261746044820152606f60f81b6064820152608401610559565b60085460405163133f757160e31b8152600481018490526000916001600160a01b0316906399fbab889060240161018060405180830381865afa158015611450573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114749190613561565b505050509750505050505050506000816001600160801b0316116114da5760405162461bcd60e51b815260206004820152601e60248201527f4e6f20686179206c6971756964657a20656e206c6120706f736963696f6e00006044820152606401610559565b60006040518060a00160405280858152602001836001600160801b031681526020016000815260200160008152602001426103846115189190613419565b905260085460408051630624e65f60e11b81528351600482015260208401516001600160801b0316602482015290830151604482015260608301516064820152608083015160848201529192506001600160a01b031690630c49ccbe9060a40160408051808303816000875af1158015611596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ba9190613642565b50506040805160808101825285815230602082019081526001600160801b0382840181815260608401828152600854955163fc6f786560e01b81528551600482015293516001600160a01b0390811660248601529151831660448501525190911660648301529192919091169063fc6f78659060840160408051808303816000875af115801561164e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116729190613642565b5050600854604051630852cd8d60e31b8152600481018790526001600160a01b03909116906342966c6890602401600060405180830381600087803b1580156116ba57600080fd5b505af11580156116ce573d6000803e3d6000fd5b505050505050505050565b60035460055460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b3906044016020604051808303816000875af115801561172e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117529190613666565b5060055460035460405163573ade8160e01b81526001600160a01b039182166004820152602481018490526002604482015230606482015291169063573ade81906084015b6020604051808303816000875af11580156117b6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0a91906133ea565b600554600254604051631a4ca37b60e21b81526001600160a01b0361010090920482166004820152602481018490523060448201529116906369328dec90606401611797565b6003546004805460405163095ea7b360e01b81526001600160a01b039182169281019290925260248201849052600092169063095ea7b3906044016020604051808303816000875af115801561187a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189e9190613666565b506040805161010080820183526003546001600160a01b03908116835260025491909104166020820152610bb891810191909152306060820152600090608081016118eb42610384613419565b815260208082018690526000604080840182905260609384019190915260048054825163414bf38960e01b815286516001600160a01b039081169382019390935293860151821660248501529185015162ffffff16604484015292840151831660648301526080840151608483015260a084015160a483015260c084015160c483015260e0840151831660e483015292935091169063414bf38990610104016020604051808303816000875af11580156119a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cd91906133ea565b9392505050565b6040516001600160a01b03838116602483015260448201839052611a3391859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050612672565b505050565b6000546001600160a01b031633146109445760405163118cdaa760e01b8152336004820152602401610559565b611a6d6126d5565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60005b600c548110156108c5576000600c8281548110611ad957611ad96133d4565b60009182526020808320909101546001600160a01b0316808352600a90915260408220909250905b8154811015611d3f576000828281548110611b1e57611b1e6133d4565b906000526020600020906009020190506000611b3861242f565b90506000611b4a836007015483612562565b905061012c8110611d2957611b62836006015461131e565b611b6f83600301546116d9565b611b7c83600201546117da565b6003546040516370a0823160e01b8152306004820152600091611bf4916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bef91906133ea565b611820565b8460020154611c039190613419565b90506000612710611c156019846134aa565b611c1f91906134d7565b90506000611c2d828461342c565b600954600254919250611c529161010090046001600160a01b039081169116846119d4565b6000612710611c638361186a6134aa565b611c6d91906134d7565b90506000612710611c8084610ea66134aa565b611c8a91906134d7565b9050611c9582611e6c565b6000611ca082611f68565b90506000611cb384838c6005015461203d565b60028b0185905560038b0183905560068b0181905560078b018a90554260048c018190558b546040805191825260208201929092529192506001600160a01b038f16917f3645b7cfbb41ac8e6dcc3c4877ede2c60b467a0374b7a7fc7563f0a09580999e910160405180910390a2505050505050505b5050508080611d3790613455565b915050611b01565b5050508080611d4d90613455565b915050611aba565b6000611d60600e5490565b90506305f5e100811015611dc45760405162461bcd60e51b815260206004820152602560248201527f4e6f2068617920737566696369656e7465732066656573207061726120636f6d6044820152643837b732b960d91b6064820152608401610559565b6000600e819055611dd66002836134d7565b90506000611de3826126f8565b905081611df381836103e861203d565b5060408051428152602081018690527f8082b0dab6d73a8025e5f15e4fdd54b68197a613e361810d4a2446c634b98ada910160405180910390a150505050565b6040516001600160a01b0384811660248301528381166044830152606482018390526109759186918216906323b872dd90608401611a01565b60025460055460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052610100909204169063095ea7b3906044016020604051808303816000875af1158015611ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eea9190613666565b5060055460025460405163617ba03760e01b81526001600160a01b0361010090920482166004820152602481018490523060448201526000606482015291169063617ba03790608401600060405180830381600087803b158015611f4d57600080fd5b505af1158015611f61573d6000803e3d6000fd5b5050505050565b60055460035460405163a415bcad60e01b81526001600160a01b039182166004820152602481018490526002604482015260006064820181905230608483015292919091169063a415bcad9060a401600060405180830381600087803b158015611fd157600080fd5b505af1158015611fe5573d6000803e3d6000fd5b5093949350505050565b6000808260028111156120045761200461318c565b0361201257506101f4919050565b60018260028111156120265761202661318c565b0361203457506102ee919050565b506103e8919050565b60025460085460405163095ea7b360e01b81526001600160a01b0391821660048201526024810186905260009261010090049091169063095ea7b3906044016020604051808303816000875af115801561209b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120bf9190613666565b5060035460085460405163095ea7b360e01b81526001600160a01b0391821660048201526024810186905291169063095ea7b3906044016020604051808303816000875af1158015612115573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121399190613666565b5060075460408051633850c7bd60e01b815290516000926001600160a01b031691633850c7bd9160048083019260e09291908290030181865afa158015612184573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a89190613695565b50505050509150506000600760009054906101000a90046001600160a01b03166001600160a01b031663d0c93a7c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612205573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612229919061372a565b9050627fffff8411156122745760405162461bcd60e51b8152602060048201526013602482015272416d706c697475646520746f6f206c6172676560681b6044820152606401610559565b8360006122818383613745565b61228b908561376c565b905060006122998484613745565b6122a39086613791565b6040805161016081018252600280546001600160a01b0361010090910481168352600354166020830152610bb89282019290925284820b60608201529082900b608082015260a081018b905260c081018a905290915060009060e08101606461230d8d60636134aa565b61231791906134d7565b815260200160646123298c60636134aa565b61233391906134d7565b815230602082015260400161234a42610384613419565b9052600854604051634418b22b60e11b81529192506001600160a01b03169063883164569061237d9084906004016137b6565b6080604051808303816000875af115801561239c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c0919061387a565b50919850505060008790036124225760405162461bcd60e51b815260206004820152602260248201527f4572726f7220616c20637265617220706f736963696f6e20656e20556e697377604482015261061760f41b6064820152608401610559565b5050505050509392505050565b6000806000600660009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015612487573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ab91906138d0565b50935050925050600082136125025760405162461bcd60e51b815260206004820152601760248201527f50726563696f204554482f55534420696e76616c69646f0000000000000000006044820152606401610559565b610e1061250f824261342c565b1061255c5760405162461bcd60e51b815260206004820152601d60248201527f50726563696f204554482f5553442064657361637475616c697a61646f0000006044820152606401610559565b50919050565b60008282106125935782612576818461342c565b612582906127106134aa565b61258c91906134d7565b9050611318565b82612576838261342c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6125f6611243565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611a9a3390565b6000806000612639846127c5565b91509150600061264761242f565b905060006305f5e10061265a83856134aa565b61266491906134d7565b905060006111d38286613419565b60006126876001600160a01b03841683612908565b905080516000141580156126ac5750808060200190518101906126aa9190613666565b155b15611a3357604051635274afe760e01b81526001600160a01b0384166004820152602401610559565b60025460ff1661094457604051638dfc202b60e01b815260040160405180910390fd5b6002546004805460405163095ea7b360e01b81526001600160a01b0391821692810192909252602482018490526000926101009004169063095ea7b3906044016020604051808303816000875af1158015612757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277b9190613666565b50604080516101008082018352600254046001600160a01b039081168252600354166020820152610bb891810191909152306060820152600090608081016118eb42610384613419565b60085460405163133f757160e31b815260048101839052600091829182916001600160a01b0316906399fbab889060240161018060405180830381865afa158015612814573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128389190613561565b50505050975050505050505050806001600160801b03166000036128625750600093849350915050565b60075460408051633850c7bd60e01b815290516000926001600160a01b031691633850c7bd9160048083019260e09291908290030181865afa1580156128ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d09190613695565b505050505050905060006128e386612916565b5090506128f18282856129b8565b94506128fe828285612a33565b9350505050915091565b60606119cd83836000612a7d565b60085460405163133f757160e31b8152600481018390526000918291829182916001600160a01b03909116906399fbab889060240161018060405180830381865afa158015612969573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298d9190613561565b50505050509650965050505050506129a482612b1a565b93506129af81612b1a565b92505050915091565b6000826001600160a01b0316846001600160a01b031611156129d8579192915b6001600160a01b038416612a216fffffffffffffffffffffffffffffffff60601b606085901b16612a098787613920565b6001600160a01b0316866001600160a01b0316612f34565b612a2b91906134d7565b949350505050565b6000826001600160a01b0316846001600160a01b03161115612a53579192915b612a2b6001600160801b038316612a6a8686613920565b6001600160a01b0316600160601b612f34565b606081471015612aa25760405163cd78605960e01b8152306004820152602401610559565b600080856001600160a01b03168486604051612abe9190613940565b60006040518083038185875af1925050503d8060008114612afb576040519150601f19603f3d011682016040523d82523d6000602084013e612b00565b606091505b5091509150612b108683836130ad565b9695505050505050565b60008060008360020b12612b31578260020b612b3e565b8260020b612b3e9061395c565b9050612b4d620d89e719613978565b62ffffff16811115612b855760405162461bcd60e51b81526020600482015260016024820152601560fa1b6044820152606401610559565b600081600116600003612b9c57600160801b612bae565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615612bed576080612be8826ffff97272373d413259a46990580e213a6134aa565b901c90505b6004821615612c17576080612c12826ffff2e50f5f656932ef12357cf3c7fdcc6134aa565b901c90505b6008821615612c41576080612c3c826fffe5caca7e10e4e61c3624eaa0941cd06134aa565b901c90505b6010821615612c6b576080612c66826fffcb9843d60f6159c9db58835c9266446134aa565b901c90505b6020821615612c95576080612c90826fff973b41fa98c081472e6896dfb254c06134aa565b901c90505b6040821615612cbf576080612cba826fff2ea16466c96a3843ec78b326b528616134aa565b901c90505b6080821615612ce9576080612ce4826ffe5dee046a99a2a811c461f1969c30536134aa565b901c90505b610100821615612d14576080612d0f826ffcbe86c7900a88aedcffc83b479aa3a46134aa565b901c90505b610200821615612d3f576080612d3a826ff987a7253ac413176f2b074cf7815e546134aa565b901c90505b610400821615612d6a576080612d65826ff3392b0822b70005940c7a398e4b70f36134aa565b901c90505b610800821615612d95576080612d90826fe7159475a2c29b7443b29c7fa6e889d96134aa565b901c90505b611000821615612dc0576080612dbb826fd097f3bdfd2022b8845ad8f792aa58256134aa565b901c90505b612000821615612deb576080612de6826fa9f746462d870fdf8a65dc1f90e061e56134aa565b901c90505b614000821615612e16576080612e11826f70d869a156d2a1b890bb3df62baf32f76134aa565b901c90505b618000821615612e41576080612e3c826f31be135f97d08fd981231505542fcfa66134aa565b901c90505b62010000821615612e6d576080612e68826f09aa508b5b7a84e1c677de54f3e99bc96134aa565b901c90505b62020000821615612e98576080612e93826e5d6af8dedb81196699c329225ee6046134aa565b901c90505b62040000821615612ec2576080612ebd826d2216e584f5fa1ea926041bedfe986134aa565b901c90505b62080000821615612eea576080612ee5826b048a170391f7dc42444e8fa26134aa565b901c90505b60008460020b1315612f0557612f02816000196134d7565b90505b612f146401000000008261399a565b15612f20576001612f23565b60005b612a2b9060ff16602083901c613419565b6000808060001985870985870292508281108382030391505080600003612f6d5760008411612f6257600080fd5b5082900490506119cd565b808411612f7957600080fd5b600084868809808403938111909203919050600085612f9a81196001613419565b16958690049593849004936000819003046001019050612fba81846134aa565b909317926000612fcb8760036134aa565b6002189050612fda81886134aa565b612fe590600261342c565b612fef90826134aa565b9050612ffb81886134aa565b61300690600261342c565b61301090826134aa565b905061301c81886134aa565b61302790600261342c565b61303190826134aa565b905061303d81886134aa565b61304890600261342c565b61305290826134aa565b905061305e81886134aa565b61306990600261342c565b61307390826134aa565b905061307f81886134aa565b61308a90600261342c565b61309490826134aa565b90506130a081866134aa565b9998505050505050505050565b6060826130c2576130bd82613109565b6119cd565b81511580156130d957506001600160a01b0384163b155b1561310257604051639996b31560e01b81526001600160a01b0385166004820152602401610559565b50806119cd565b8051156131195780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60006020828403121561314457600080fd5b5035919050565b6001600160a01b03811681146108c557600080fd5b6000806040838503121561317357600080fd5b823561317e8161314b565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b600381106131c057634e487b7160e01b600052602160045260246000fd5b9052565b89815261012081016131d9602083018b6131a2565b60408201989098526060810196909652608086019490945260a085019290925260c084015260e08301526101009091015292915050565b6000806020838503121561322357600080fd5b823567ffffffffffffffff8082111561323b57600080fd5b818501915085601f83011261324f57600080fd5b81358181111561325e57600080fd5b86602082850101111561327057600080fd5b60209290920196919550909350505050565b6000806040838503121561329557600080fd5b823591506020830135600381106132ab57600080fd5b809150509250929050565b60005b838110156132d15781810151838201526020016132b9565b50506000910152565b821515815260406020820152600082518060408401526133018160608501602087016132b6565b601f01601f1916919091016060019392505050565b60006020828403121561332857600080fd5b81356119cd8161314b565b602080825282518282018190526000919060409081850190868401855b828110156133c7578151805185528681015161336e888701826131a2565b508086015185870152606080820151908601526080808201519086015260a0808201519086015260c0808201519086015260e0808201519086015261010090810151908501526101209093019290850190600101613350565b5091979650505050505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156133fc57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561131857611318613403565b8181038181111561131857611318613403565b634e487b7160e01b600052603160045260246000fd5b60006001820161346757613467613403565b5060010190565b80151581146108c557600080fd5b6000806040838503121561348f57600080fd5b823561349a8161346e565b915060208301356132ab8161346e565b808202811582820484141761131857611318613403565b634e487b7160e01b600052601260045260246000fd5b6000826134e6576134e66134c1565b500490565b848152602081018490526080810161350660408301856131a2565b82606083015295945050505050565b80516135208161314b565b919050565b805162ffffff8116811461352057600080fd5b8051600281900b811461352057600080fd5b80516001600160801b038116811461352057600080fd5b6000806000806000806000806000806000806101808d8f03121561358457600080fd5b8c516bffffffffffffffffffffffff811681146135a057600080fd5b9b506135ae60208e01613515565b9a506135bc60408e01613515565b99506135ca60608e01613515565b98506135d860808e01613525565b97506135e660a08e01613538565b96506135f460c08e01613538565b955061360260e08e0161354a565b94506101008d015193506101208d015192506136216101408e0161354a565b91506136306101608e0161354a565b90509295989b509295989b509295989b565b6000806040838503121561365557600080fd5b505080516020909101519092909150565b60006020828403121561367857600080fd5b81516119cd8161346e565b805161ffff8116811461352057600080fd5b600080600080600080600060e0888a0312156136b057600080fd5b87516136bb8161314b565b96506136c960208901613538565b95506136d760408901613683565b94506136e560608901613683565b93506136f360808901613683565b925060a088015160ff8116811461370957600080fd5b60c089015190925061371a8161346e565b8091505092959891949750929550565b60006020828403121561373c57600080fd5b6119cd82613538565b60008260020b8260020b028060020b915080821461376557613765613403565b5092915050565b600282810b9082900b03627fffff198112627fffff8213171561131857611318613403565b600281810b9083900b01627fffff8113627fffff198212171561131857611318613403565b81516001600160a01b03168152610160810160208301516137e260208401826001600160a01b03169052565b5060408301516137f9604084018262ffffff169052565b50606083015161380e606084018260020b9052565b506080830151613823608084018260020b9052565b5060a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151613869828501826001600160a01b03169052565b505061014092830151919092015290565b6000806000806080858703121561389057600080fd5b845193506138a06020860161354a565b6040860151606090960151949790965092505050565b805169ffffffffffffffffffff8116811461352057600080fd5b600080600080600060a086880312156138e857600080fd5b6138f1866138b6565b9450602086015193506040860151925060608601519150613914608087016138b6565b90509295509295909350565b6001600160a01b0382811682821603908082111561376557613765613403565b600082516139528184602087016132b6565b9190910192915050565b6000600160ff1b820161397157613971613403565b5060000390565b60008160020b627fffff19810361399157613991613403565b60000392915050565b6000826139a9576139a96134c1565b50069056fea2646970667358221220f85f8a6506fde4c4e4cf1dc6887455fe8f0fe59ca5d423a784c7c941789fcf8664736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102315760003560e01c80636e04ff0d11610130578063a03e4bc3116100b8578063c85b967d1161007c578063c85b967d14610462578063c885c43b1461046b578063db2e21bc1461048b578063ecf6204d14610493578063f2fde38b146104a657600080fd5b8063a03e4bc3146103f6578063a42dce8014610409578063bdd3d8251461041c578063c415b95c1461042f578063c52c5c881461044257600080fd5b80638456cb59116100ff5780638456cb59146103cb5780638a4660fe146103d35780638be679ce1461025a5780638da5cb5b146103dd5780639be572f6146103ee57600080fd5b80636e04ff0d1461037c578063715018a61461039d578063735de9f7146103a5578063791b98bc146103b857600080fd5b80633fc8cef3116101be578063517454f111610182578063517454f114610338578063587f5ed7146103415780635c190bfc1461034a5780635c975abb146103535780635e03b67a1461036957600080fd5b80633fc8cef3146102ec57806342f6fb29146102ff5780634585e33b146103125780634c76361e14610281578063502c9bd51461032557600080fd5b80632e1a7d4d116102055780632e1a7d4d1461026c57806335a4bece146102815780633e413bee1461028c5780633e6d9770146102bc5780633f4ba83a146102e457600080fd5b80620b46f8146102365780630ad8f69d146102515780631ed406c01461025a5780632b34aaae14610263575b600080fd5b61023e601981565b6040519081526020015b60405180910390f35b61023e6101f481565b61023e6102ee81565b61023e6103e881565b61027f61027a366004613132565b6104b9565b005b61023e6305f5e10081565b6002546102a49061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610248565b6102cf6102ca366004613160565b6108c8565b604051610248999897969594939291906131c4565b61027f610934565b6003546102a4906001600160a01b031681565b6006546102a4906001600160a01b031681565b61027f610320366004613210565b610946565b6102a4610333366004613132565b61097b565b61023e600d5481565b61023e600e5481565b61023e61022681565b60025460ff166040519015158152602001610248565b61027f610377366004613282565b6109a5565b61038f61038a366004613210565b610d0e565b6040516102489291906132da565b61027f610e51565b6004546102a4906001600160a01b031681565b6008546102a4906001600160a01b031681565b61027f610e63565b61023e624c4b4081565b6000546001600160a01b03166102a4565b600c5461023e565b6005546102a4906001600160a01b031681565b61027f610417366004613316565b610e73565b6007546102a4906001600160a01b031681565b6009546102a4906001600160a01b031681565b610455610450366004613316565b610e9d565b6040516102489190613333565b61023e61012c81565b61023e610479366004613316565b600b6020526000908152604090205481565b61027f610f9c565b61023e6104a1366004613132565b61113d565b61027f6104b4366004613316565b6111de565b6104c1611219565b6104c9611243565b336000818152600a60205260408120916104e39084611267565b905060008282815481106104f9576104f96133d4565b9060005260206000209060090201905060008160020154116105625760405162461bcd60e51b815260206004820152601760248201527f4e6f2068617920696e76657273696f6e2061637469766100000000000000000060448201526064015b60405180910390fd5b61056f816006015461131e565b61057c81600301546116d9565b61058981600201546117da565b6003546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156105d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f691906133ea565b9050600061060382611820565b905060008184600201546106179190613419565b8654909150869061062a9060019061342c565b8154811061063a5761063a6133d4565b906000526020600020906009020186868154811061065a5761065a6133d4565b600091825260209091208254600990920201908155600180830154818301805460ff90921692909160ff1916908360028111156106995761069961318c565b021790555060028201548160020155600382015481600301556004820154816004015560058201548160050155600682015481600601556007820154816007015560088201548160080155905050858054806106f7576106f761343f565b60008281526020812060096000199093019283020181815560018101805460ff1916905560028101829055600381018290556004810182905560058101829055600681018290556007810182905560080181905591558654900361085f5760005b600c5481101561085d57336001600160a01b0316600c828154811061077f5761077f6133d4565b6000918252602090912001546001600160a01b03160361084b57600c80546107a99060019061342c565b815481106107b9576107b96133d4565b600091825260209091200154600c80546001600160a01b0390921691839081106107e5576107e56133d4565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600c8054806108245761082461343f565b600082815260209020810160001990810180546001600160a01b031916905501905561085d565b8061085581613455565b915050610758565b505b60025461087b9061010090046001600160a01b031633836119d4565b604080518881526020810183905233917f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc6910160405180910390a25050505050506108c560018055565b50565b600a60205281600052604060002081815481106108e457600080fd5b600091825260209091206009909102018054600182015460028301546003840154600485015460058601546006870154600788015460089098015496995060ff9095169750929591949093919089565b61093c611a38565b610944611a65565b565b6000806109558385018561347c565b91509150811561096757610967611ab7565b801561097557610975611d55565b50505050565b600c818154811061098b57600080fd5b6000918252602090912001546001600160a01b0316905081565b6109ad611219565b6109b5611243565b624c4b40821015610a085760405162461bcd60e51b815260206004820152601960248201527f4d6f6e746f206d696e696d6f206e6f20616c63616e7a61646f000000000000006044820152606401610559565b6305f5e100821115610a545760405162461bcd60e51b81526020600482015260156024820152744d6f6e746f206d6178696d6f20657863656469646f60581b6044820152606401610559565b600254610a719061010090046001600160a01b0316333085611e33565b6000612710610a816019856134aa565b610a8b91906134d7565b90506000610a99828561342c565b600954600254919250610abe9161010090046001600160a01b039081169116846119d4565b6000612710610acf8361186a6134aa565b610ad991906134d7565b90506000612710610aec84610ea66134aa565b610af691906134d7565b9050610b0182611e6c565b6000610b0c82611f68565b90506000610b1987611fef565b90506000610b2885848461203d565b90506000610b3461242f565b336000908152600b60205260408120805492935090919082610b5583613455565b91905055905060006040518061012001604052808381526020018c6002811115610b8157610b8161318c565b815260208082018b905260408083018a90524260608401819052608084018a905260a0840189905260c0840188905260e090930192909252336000908152600a825291822080546001818101835591845292829020845160099094020192835590830151828201805494955085949192909160ff191690836002811115610c0a57610c0a61318c565b02179055506040828101516002830155606083015160038301556080830151600483015560a0830151600583015560c0830151600683015560e0830151600783015561010090920151600890910155336000908152600a6020522054600103610cb057600c80546001810182556000919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180546001600160a01b031916331790555b336001600160a01b03167f66fff6b0bd3e1f85abff4e26682c05a8d2a6b4db8812b651d56694750ed8f99c838b8e89604051610cef94939291906134eb565b60405180910390a250505050505050505050610d0a60018055565b5050565b600060606000806305f5e100610d23600e5490565b10610d2c575060015b60005b600c54811015610e0f576000600c8281548110610d4e57610d4e6133d4565b60009182526020808320909101546001600160a01b0316808352600a90915260408220909250905b8154811015610dec576000828281548110610d9357610d936133d4565b906000526020600020906009020190506000610dad61242f565b90506000610dbf836007015483612562565b905061012c8110610dd65760019850505050610dec565b5050508080610de490613455565b915050610d76565b508415610dfa575050610e0f565b50508080610e0790613455565b915050610d2f565b508180610e195750805b93508315610e485760408051831515602082015282151581830152815180820383018152606090910190915292505b50509250929050565b610e59611a38565b610944600061259e565b610e6b611a38565b6109446125ee565b610e7b611a38565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600a60209081526040808320805482518185028101850190935280835260609492939192909184015b82821015610f91578382906000526020600020906009020160405180610120016040529081600082015481526020016001820160009054906101000a900460ff166002811115610f2757610f2761318c565b6002811115610f3857610f3861318c565b815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815260200160088201548152505081526020019060010190610ed5565b505050509050919050565b610fa4611a38565b6002546040516370a0823160e01b815230600482015260009161010090046001600160a01b0316906370a0823190602401602060405180830381865afa158015610ff2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101691906133ea565b6003546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611064573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108891906133ea565b905081156110bd576110bd6110a56000546001600160a01b031690565b60025461010090046001600160a01b031690846119d4565b80156110eb576110eb6110d86000546001600160a01b031690565b6003546001600160a01b031690836119d4565b6000546040805184815260208101849052428183015290516001600160a01b03909216917f5e51ee1d526b1e287667d5b5aa0f1595afa8e91197fb257f8351274f8fca50be9181900360600190a25050565b336000818152600a60205260408120909182919061115b9085611267565b8154811061116b5761116b6133d4565b90600052602060002090600902019050600061118a826006015461262b565b600283015490915060006305f5e1006111a161242f565b85600301546111b091906134aa565b6111ba91906134d7565b90506000816111c98486613419565b6111d3919061342c565b979650505050505050565b6111e6611a38565b6001600160a01b03811661121057604051631e4fbdf760e01b815260006004820152602401610559565b6108c58161259e565b60026001540361123c57604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b60025460ff16156109445760405163d93c066560e01b815260040160405180910390fd5b6001600160a01b0382166000908152600a60205260408120815b81548110156112cf578382828154811061129d5761129d6133d4565b906000526020600020906009020160000154036112bd5791506113189050565b806112c781613455565b915050611281565b5060405162461bcd60e51b815260206004820152601760248201527f496e76657273696f6e206e6f20656e636f6e74726164610000000000000000006044820152606401610559565b92915050565b60085460405163133f757160e31b8152600481018390526000916001600160a01b0316906399fbab889060240161018060405180830381865afa158015611369573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138d9190613561565b50505050505050505092505050306001600160a01b0316816001600160a01b0316146114055760405162461bcd60e51b815260206004820152602160248201527f546f6b656e204944206e6f2070657274656e65636520616c20636f6e747261746044820152606f60f81b6064820152608401610559565b60085460405163133f757160e31b8152600481018490526000916001600160a01b0316906399fbab889060240161018060405180830381865afa158015611450573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114749190613561565b505050509750505050505050506000816001600160801b0316116114da5760405162461bcd60e51b815260206004820152601e60248201527f4e6f20686179206c6971756964657a20656e206c6120706f736963696f6e00006044820152606401610559565b60006040518060a00160405280858152602001836001600160801b031681526020016000815260200160008152602001426103846115189190613419565b905260085460408051630624e65f60e11b81528351600482015260208401516001600160801b0316602482015290830151604482015260608301516064820152608083015160848201529192506001600160a01b031690630c49ccbe9060a40160408051808303816000875af1158015611596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ba9190613642565b50506040805160808101825285815230602082019081526001600160801b0382840181815260608401828152600854955163fc6f786560e01b81528551600482015293516001600160a01b0390811660248601529151831660448501525190911660648301529192919091169063fc6f78659060840160408051808303816000875af115801561164e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116729190613642565b5050600854604051630852cd8d60e31b8152600481018790526001600160a01b03909116906342966c6890602401600060405180830381600087803b1580156116ba57600080fd5b505af11580156116ce573d6000803e3d6000fd5b505050505050505050565b60035460055460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b3906044016020604051808303816000875af115801561172e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117529190613666565b5060055460035460405163573ade8160e01b81526001600160a01b039182166004820152602481018490526002604482015230606482015291169063573ade81906084015b6020604051808303816000875af11580156117b6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0a91906133ea565b600554600254604051631a4ca37b60e21b81526001600160a01b0361010090920482166004820152602481018490523060448201529116906369328dec90606401611797565b6003546004805460405163095ea7b360e01b81526001600160a01b039182169281019290925260248201849052600092169063095ea7b3906044016020604051808303816000875af115801561187a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189e9190613666565b506040805161010080820183526003546001600160a01b03908116835260025491909104166020820152610bb891810191909152306060820152600090608081016118eb42610384613419565b815260208082018690526000604080840182905260609384019190915260048054825163414bf38960e01b815286516001600160a01b039081169382019390935293860151821660248501529185015162ffffff16604484015292840151831660648301526080840151608483015260a084015160a483015260c084015160c483015260e0840151831660e483015292935091169063414bf38990610104016020604051808303816000875af11580156119a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cd91906133ea565b9392505050565b6040516001600160a01b03838116602483015260448201839052611a3391859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050612672565b505050565b6000546001600160a01b031633146109445760405163118cdaa760e01b8152336004820152602401610559565b611a6d6126d5565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60005b600c548110156108c5576000600c8281548110611ad957611ad96133d4565b60009182526020808320909101546001600160a01b0316808352600a90915260408220909250905b8154811015611d3f576000828281548110611b1e57611b1e6133d4565b906000526020600020906009020190506000611b3861242f565b90506000611b4a836007015483612562565b905061012c8110611d2957611b62836006015461131e565b611b6f83600301546116d9565b611b7c83600201546117da565b6003546040516370a0823160e01b8152306004820152600091611bf4916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bef91906133ea565b611820565b8460020154611c039190613419565b90506000612710611c156019846134aa565b611c1f91906134d7565b90506000611c2d828461342c565b600954600254919250611c529161010090046001600160a01b039081169116846119d4565b6000612710611c638361186a6134aa565b611c6d91906134d7565b90506000612710611c8084610ea66134aa565b611c8a91906134d7565b9050611c9582611e6c565b6000611ca082611f68565b90506000611cb384838c6005015461203d565b60028b0185905560038b0183905560068b0181905560078b018a90554260048c018190558b546040805191825260208201929092529192506001600160a01b038f16917f3645b7cfbb41ac8e6dcc3c4877ede2c60b467a0374b7a7fc7563f0a09580999e910160405180910390a2505050505050505b5050508080611d3790613455565b915050611b01565b5050508080611d4d90613455565b915050611aba565b6000611d60600e5490565b90506305f5e100811015611dc45760405162461bcd60e51b815260206004820152602560248201527f4e6f2068617920737566696369656e7465732066656573207061726120636f6d6044820152643837b732b960d91b6064820152608401610559565b6000600e819055611dd66002836134d7565b90506000611de3826126f8565b905081611df381836103e861203d565b5060408051428152602081018690527f8082b0dab6d73a8025e5f15e4fdd54b68197a613e361810d4a2446c634b98ada910160405180910390a150505050565b6040516001600160a01b0384811660248301528381166044830152606482018390526109759186918216906323b872dd90608401611a01565b60025460055460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052610100909204169063095ea7b3906044016020604051808303816000875af1158015611ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eea9190613666565b5060055460025460405163617ba03760e01b81526001600160a01b0361010090920482166004820152602481018490523060448201526000606482015291169063617ba03790608401600060405180830381600087803b158015611f4d57600080fd5b505af1158015611f61573d6000803e3d6000fd5b5050505050565b60055460035460405163a415bcad60e01b81526001600160a01b039182166004820152602481018490526002604482015260006064820181905230608483015292919091169063a415bcad9060a401600060405180830381600087803b158015611fd157600080fd5b505af1158015611fe5573d6000803e3d6000fd5b5093949350505050565b6000808260028111156120045761200461318c565b0361201257506101f4919050565b60018260028111156120265761202661318c565b0361203457506102ee919050565b506103e8919050565b60025460085460405163095ea7b360e01b81526001600160a01b0391821660048201526024810186905260009261010090049091169063095ea7b3906044016020604051808303816000875af115801561209b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120bf9190613666565b5060035460085460405163095ea7b360e01b81526001600160a01b0391821660048201526024810186905291169063095ea7b3906044016020604051808303816000875af1158015612115573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121399190613666565b5060075460408051633850c7bd60e01b815290516000926001600160a01b031691633850c7bd9160048083019260e09291908290030181865afa158015612184573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a89190613695565b50505050509150506000600760009054906101000a90046001600160a01b03166001600160a01b031663d0c93a7c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612205573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612229919061372a565b9050627fffff8411156122745760405162461bcd60e51b8152602060048201526013602482015272416d706c697475646520746f6f206c6172676560681b6044820152606401610559565b8360006122818383613745565b61228b908561376c565b905060006122998484613745565b6122a39086613791565b6040805161016081018252600280546001600160a01b0361010090910481168352600354166020830152610bb89282019290925284820b60608201529082900b608082015260a081018b905260c081018a905290915060009060e08101606461230d8d60636134aa565b61231791906134d7565b815260200160646123298c60636134aa565b61233391906134d7565b815230602082015260400161234a42610384613419565b9052600854604051634418b22b60e11b81529192506001600160a01b03169063883164569061237d9084906004016137b6565b6080604051808303816000875af115801561239c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c0919061387a565b50919850505060008790036124225760405162461bcd60e51b815260206004820152602260248201527f4572726f7220616c20637265617220706f736963696f6e20656e20556e697377604482015261061760f41b6064820152608401610559565b5050505050509392505050565b6000806000600660009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015612487573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ab91906138d0565b50935050925050600082136125025760405162461bcd60e51b815260206004820152601760248201527f50726563696f204554482f55534420696e76616c69646f0000000000000000006044820152606401610559565b610e1061250f824261342c565b1061255c5760405162461bcd60e51b815260206004820152601d60248201527f50726563696f204554482f5553442064657361637475616c697a61646f0000006044820152606401610559565b50919050565b60008282106125935782612576818461342c565b612582906127106134aa565b61258c91906134d7565b9050611318565b82612576838261342c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6125f6611243565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611a9a3390565b6000806000612639846127c5565b91509150600061264761242f565b905060006305f5e10061265a83856134aa565b61266491906134d7565b905060006111d38286613419565b60006126876001600160a01b03841683612908565b905080516000141580156126ac5750808060200190518101906126aa9190613666565b155b15611a3357604051635274afe760e01b81526001600160a01b0384166004820152602401610559565b60025460ff1661094457604051638dfc202b60e01b815260040160405180910390fd5b6002546004805460405163095ea7b360e01b81526001600160a01b0391821692810192909252602482018490526000926101009004169063095ea7b3906044016020604051808303816000875af1158015612757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277b9190613666565b50604080516101008082018352600254046001600160a01b039081168252600354166020820152610bb891810191909152306060820152600090608081016118eb42610384613419565b60085460405163133f757160e31b815260048101839052600091829182916001600160a01b0316906399fbab889060240161018060405180830381865afa158015612814573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128389190613561565b50505050975050505050505050806001600160801b03166000036128625750600093849350915050565b60075460408051633850c7bd60e01b815290516000926001600160a01b031691633850c7bd9160048083019260e09291908290030181865afa1580156128ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d09190613695565b505050505050905060006128e386612916565b5090506128f18282856129b8565b94506128fe828285612a33565b9350505050915091565b60606119cd83836000612a7d565b60085460405163133f757160e31b8152600481018390526000918291829182916001600160a01b03909116906399fbab889060240161018060405180830381865afa158015612969573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298d9190613561565b50505050509650965050505050506129a482612b1a565b93506129af81612b1a565b92505050915091565b6000826001600160a01b0316846001600160a01b031611156129d8579192915b6001600160a01b038416612a216fffffffffffffffffffffffffffffffff60601b606085901b16612a098787613920565b6001600160a01b0316866001600160a01b0316612f34565b612a2b91906134d7565b949350505050565b6000826001600160a01b0316846001600160a01b03161115612a53579192915b612a2b6001600160801b038316612a6a8686613920565b6001600160a01b0316600160601b612f34565b606081471015612aa25760405163cd78605960e01b8152306004820152602401610559565b600080856001600160a01b03168486604051612abe9190613940565b60006040518083038185875af1925050503d8060008114612afb576040519150601f19603f3d011682016040523d82523d6000602084013e612b00565b606091505b5091509150612b108683836130ad565b9695505050505050565b60008060008360020b12612b31578260020b612b3e565b8260020b612b3e9061395c565b9050612b4d620d89e719613978565b62ffffff16811115612b855760405162461bcd60e51b81526020600482015260016024820152601560fa1b6044820152606401610559565b600081600116600003612b9c57600160801b612bae565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615612bed576080612be8826ffff97272373d413259a46990580e213a6134aa565b901c90505b6004821615612c17576080612c12826ffff2e50f5f656932ef12357cf3c7fdcc6134aa565b901c90505b6008821615612c41576080612c3c826fffe5caca7e10e4e61c3624eaa0941cd06134aa565b901c90505b6010821615612c6b576080612c66826fffcb9843d60f6159c9db58835c9266446134aa565b901c90505b6020821615612c95576080612c90826fff973b41fa98c081472e6896dfb254c06134aa565b901c90505b6040821615612cbf576080612cba826fff2ea16466c96a3843ec78b326b528616134aa565b901c90505b6080821615612ce9576080612ce4826ffe5dee046a99a2a811c461f1969c30536134aa565b901c90505b610100821615612d14576080612d0f826ffcbe86c7900a88aedcffc83b479aa3a46134aa565b901c90505b610200821615612d3f576080612d3a826ff987a7253ac413176f2b074cf7815e546134aa565b901c90505b610400821615612d6a576080612d65826ff3392b0822b70005940c7a398e4b70f36134aa565b901c90505b610800821615612d95576080612d90826fe7159475a2c29b7443b29c7fa6e889d96134aa565b901c90505b611000821615612dc0576080612dbb826fd097f3bdfd2022b8845ad8f792aa58256134aa565b901c90505b612000821615612deb576080612de6826fa9f746462d870fdf8a65dc1f90e061e56134aa565b901c90505b614000821615612e16576080612e11826f70d869a156d2a1b890bb3df62baf32f76134aa565b901c90505b618000821615612e41576080612e3c826f31be135f97d08fd981231505542fcfa66134aa565b901c90505b62010000821615612e6d576080612e68826f09aa508b5b7a84e1c677de54f3e99bc96134aa565b901c90505b62020000821615612e98576080612e93826e5d6af8dedb81196699c329225ee6046134aa565b901c90505b62040000821615612ec2576080612ebd826d2216e584f5fa1ea926041bedfe986134aa565b901c90505b62080000821615612eea576080612ee5826b048a170391f7dc42444e8fa26134aa565b901c90505b60008460020b1315612f0557612f02816000196134d7565b90505b612f146401000000008261399a565b15612f20576001612f23565b60005b612a2b9060ff16602083901c613419565b6000808060001985870985870292508281108382030391505080600003612f6d5760008411612f6257600080fd5b5082900490506119cd565b808411612f7957600080fd5b600084868809808403938111909203919050600085612f9a81196001613419565b16958690049593849004936000819003046001019050612fba81846134aa565b909317926000612fcb8760036134aa565b6002189050612fda81886134aa565b612fe590600261342c565b612fef90826134aa565b9050612ffb81886134aa565b61300690600261342c565b61301090826134aa565b905061301c81886134aa565b61302790600261342c565b61303190826134aa565b905061303d81886134aa565b61304890600261342c565b61305290826134aa565b905061305e81886134aa565b61306990600261342c565b61307390826134aa565b905061307f81886134aa565b61308a90600261342c565b61309490826134aa565b90506130a081866134aa565b9998505050505050505050565b6060826130c2576130bd82613109565b6119cd565b81511580156130d957506001600160a01b0384163b155b1561310257604051639996b31560e01b81526001600160a01b0385166004820152602401610559565b50806119cd565b8051156131195780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60006020828403121561314457600080fd5b5035919050565b6001600160a01b03811681146108c557600080fd5b6000806040838503121561317357600080fd5b823561317e8161314b565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b600381106131c057634e487b7160e01b600052602160045260246000fd5b9052565b89815261012081016131d9602083018b6131a2565b60408201989098526060810196909652608086019490945260a085019290925260c084015260e08301526101009091015292915050565b6000806020838503121561322357600080fd5b823567ffffffffffffffff8082111561323b57600080fd5b818501915085601f83011261324f57600080fd5b81358181111561325e57600080fd5b86602082850101111561327057600080fd5b60209290920196919550909350505050565b6000806040838503121561329557600080fd5b823591506020830135600381106132ab57600080fd5b809150509250929050565b60005b838110156132d15781810151838201526020016132b9565b50506000910152565b821515815260406020820152600082518060408401526133018160608501602087016132b6565b601f01601f1916919091016060019392505050565b60006020828403121561332857600080fd5b81356119cd8161314b565b602080825282518282018190526000919060409081850190868401855b828110156133c7578151805185528681015161336e888701826131a2565b508086015185870152606080820151908601526080808201519086015260a0808201519086015260c0808201519086015260e0808201519086015261010090810151908501526101209093019290850190600101613350565b5091979650505050505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156133fc57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561131857611318613403565b8181038181111561131857611318613403565b634e487b7160e01b600052603160045260246000fd5b60006001820161346757613467613403565b5060010190565b80151581146108c557600080fd5b6000806040838503121561348f57600080fd5b823561349a8161346e565b915060208301356132ab8161346e565b808202811582820484141761131857611318613403565b634e487b7160e01b600052601260045260246000fd5b6000826134e6576134e66134c1565b500490565b848152602081018490526080810161350660408301856131a2565b82606083015295945050505050565b80516135208161314b565b919050565b805162ffffff8116811461352057600080fd5b8051600281900b811461352057600080fd5b80516001600160801b038116811461352057600080fd5b6000806000806000806000806000806000806101808d8f03121561358457600080fd5b8c516bffffffffffffffffffffffff811681146135a057600080fd5b9b506135ae60208e01613515565b9a506135bc60408e01613515565b99506135ca60608e01613515565b98506135d860808e01613525565b97506135e660a08e01613538565b96506135f460c08e01613538565b955061360260e08e0161354a565b94506101008d015193506101208d015192506136216101408e0161354a565b91506136306101608e0161354a565b90509295989b509295989b509295989b565b6000806040838503121561365557600080fd5b505080516020909101519092909150565b60006020828403121561367857600080fd5b81516119cd8161346e565b805161ffff8116811461352057600080fd5b600080600080600080600060e0888a0312156136b057600080fd5b87516136bb8161314b565b96506136c960208901613538565b95506136d760408901613683565b94506136e560608901613683565b93506136f360808901613683565b925060a088015160ff8116811461370957600080fd5b60c089015190925061371a8161346e565b8091505092959891949750929550565b60006020828403121561373c57600080fd5b6119cd82613538565b60008260020b8260020b028060020b915080821461376557613765613403565b5092915050565b600282810b9082900b03627fffff198112627fffff8213171561131857611318613403565b600281810b9083900b01627fffff8113627fffff198212171561131857611318613403565b81516001600160a01b03168152610160810160208301516137e260208401826001600160a01b03169052565b5060408301516137f9604084018262ffffff169052565b50606083015161380e606084018260020b9052565b506080830151613823608084018260020b9052565b5060a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151613869828501826001600160a01b03169052565b505061014092830151919092015290565b6000806000806080858703121561389057600080fd5b845193506138a06020860161354a565b6040860151606090960151949790965092505050565b805169ffffffffffffffffffff8116811461352057600080fd5b600080600080600060a086880312156138e857600080fd5b6138f1866138b6565b9450602086015193506040860151925060608601519150613914608087016138b6565b90509295509295909350565b6001600160a01b0382811682821603908082111561376557613765613403565b600082516139528184602087016132b6565b9190910192915050565b6000600160ff1b820161397157613971613403565b5060000390565b60008160020b627fffff19810361399157613991613403565b60000392915050565b6000826139a9576139a96134c1565b50069056fea2646970667358221220f85f8a6506fde4c4e4cf1dc6887455fe8f0fe59ca5d423a784c7c941789fcf8664736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "Implementación de la función checkUpkeep de Chainlink Automation.",
        "returns": {
          "performData": "Datos para realizar el mantenimiento.",
          "upkeepNeeded": "Indica si se necesita realizar mantenimiento."
        }
      },
      "emergencyWithdraw()": {
        "details": "Emergencia: permite al propietario retirar todos los fondos del contrato."
      },
      "getInvestmentValue(uint256)": {
        "details": "Obtiene el valor total de una inversion en USDC.",
        "params": {
          "investmentId": "El ID de la inversion."
        },
        "returns": {
          "_0": "El valor total de la inversion en USDC."
        }
      },
      "getTotalUsers()": {
        "details": "Obtiene el total de inversiones realizadas.",
        "returns": {
          "_0": "El numero total de usuarios con inversiones."
        }
      },
      "getUserInvestments(address)": {
        "details": "Obtiene todas las inversiones de un usuario.",
        "params": {
          "user": "La direccion del usuario."
        },
        "returns": {
          "_0": "Un array de inversiones del usuario."
        }
      },
      "invest(uint256,uint8)": {
        "details": "Permite a un usuario invertir USDC en la plataforma.",
        "params": {
          "amount": "La cantidad de USDC a invertir (6 decimales).",
          "investmentType": "El tipo de estrategia de inversion seleccionada."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pausa todas las operaciones del contrato."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "performUpkeep(bytes)": {
        "details": "Implementacion de la funcion performUpkeep de Chainlink Automation.",
        "params": {
          "performData": "Datos para realizar el mantenimiento."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setFeeCollector(address)": {
        "details": "Configura la direccion del colector de fees.",
        "params": {
          "_feeCollector": "La nueva direccion del colector de fees."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Reanuda todas las operaciones del contrato."
      },
      "withdraw(uint256)": {
        "details": "Permite a un usuario retirar una inversion especifica.",
        "params": {
          "investmentId": "El ID de la inversion a retirar."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1273,
        "contract": "contracts/YourContract.sol:MiPlata",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2404,
        "contract": "contracts/YourContract.sol:MiPlata",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2285,
        "contract": "contracts/YourContract.sol:MiPlata",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 4542,
        "contract": "contracts/YourContract.sol:MiPlata",
        "label": "usdc",
        "offset": 1,
        "slot": "2",
        "type": "t_contract(IERC20)1490"
      },
      {
        "astId": 4545,
        "contract": "contracts/YourContract.sol:MiPlata",
        "label": "weth",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)1490"
      },
      {
        "astId": 4548,
        "contract": "contracts/YourContract.sol:MiPlata",
        "label": "uniswapRouter",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ISwapRouter)4049"
      },
      {
        "astId": 4551,
        "contract": "contracts/YourContract.sol:MiPlata",
        "label": "aavePool",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IPool)638"
      },
      {
        "astId": 4554,
        "contract": "contracts/YourContract.sol:MiPlata",
        "label": "ethUsdPriceFeed",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(AggregatorV3Interface)1264"
      },
      {
        "astId": 4557,
        "contract": "contracts/YourContract.sol:MiPlata",
        "label": "uniswapPool",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IUniswapV3Pool)2496"
      },
      {
        "astId": 4560,
        "contract": "contracts/YourContract.sol:MiPlata",
        "label": "positionManager",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(INonfungiblePositionManager)3888"
      },
      {
        "astId": 4598,
        "contract": "contracts/YourContract.sol:MiPlata",
        "label": "feeCollector",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 4604,
        "contract": "contracts/YourContract.sol:MiPlata",
        "label": "investments",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_array(t_struct(UserInvestment)4539_storage)dyn_storage)"
      },
      {
        "astId": 4608,
        "contract": "contracts/YourContract.sol:MiPlata",
        "label": "userInvestmentCounters",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4611,
        "contract": "contracts/YourContract.sol:MiPlata",
        "label": "userAddresses",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4613,
        "contract": "contracts/YourContract.sol:MiPlata",
        "label": "lastProcessedUserIndex",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 4660,
        "contract": "contracts/YourContract.sol:MiPlata",
        "label": "accumulatedFees",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(UserInvestment)4539_storage)dyn_storage": {
        "base": "t_struct(UserInvestment)4539_storage",
        "encoding": "dynamic_array",
        "label": "struct MiPlata.UserInvestment[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)1264": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1490": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(INonfungiblePositionManager)3888": {
        "encoding": "inplace",
        "label": "contract INonfungiblePositionManager",
        "numberOfBytes": "20"
      },
      "t_contract(IPool)638": {
        "encoding": "inplace",
        "label": "contract IPool",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapRouter)4049": {
        "encoding": "inplace",
        "label": "contract ISwapRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV3Pool)2496": {
        "encoding": "inplace",
        "label": "contract IUniswapV3Pool",
        "numberOfBytes": "20"
      },
      "t_enum(InvestmentType)4519": {
        "encoding": "inplace",
        "label": "enum MiPlata.InvestmentType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(UserInvestment)4539_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MiPlata.UserInvestment[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(UserInvestment)4539_storage)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(UserInvestment)4539_storage": {
        "encoding": "inplace",
        "label": "struct MiPlata.UserInvestment",
        "members": [
          {
            "astId": 4521,
            "contract": "contracts/YourContract.sol:MiPlata",
            "label": "investmentId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4524,
            "contract": "contracts/YourContract.sol:MiPlata",
            "label": "investmentType",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(InvestmentType)4519"
          },
          {
            "astId": 4526,
            "contract": "contracts/YourContract.sol:MiPlata",
            "label": "usdcDeposited",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4528,
            "contract": "contracts/YourContract.sol:MiPlata",
            "label": "wethBorrowed",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4530,
            "contract": "contracts/YourContract.sol:MiPlata",
            "label": "lastAutoCompound",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4532,
            "contract": "contracts/YourContract.sol:MiPlata",
            "label": "amplitude",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4534,
            "contract": "contracts/YourContract.sol:MiPlata",
            "label": "tokenId",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4536,
            "contract": "contracts/YourContract.sol:MiPlata",
            "label": "lastEthPrice",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 4538,
            "contract": "contracts/YourContract.sol:MiPlata",
            "label": "timestamp",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}